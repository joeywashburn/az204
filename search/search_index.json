{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Azure Deployment Guide","text":"<p>Welcome! \ud83d\udc4b This guide is designed to help you prepare for the AZ-204: Developing Solutions for Microsoft Azure exam. It covers key concepts, practical steps, and resources to master the skills needed to pass the exam.</p>"},{"location":"#exam-overview","title":"\ud83d\udcda Exam Overview","text":"<p>The AZ-204 exam tests your ability to develop solutions for Microsoft Azure. Below is a breakdown of the skills measured:</p> <ul> <li>Develop Azure compute solutions (25\u201330%)</li> <li>Develop for Azure storage (15\u201320%)</li> <li>Implement Azure security (15\u201320%)</li> <li>Monitor, troubleshoot, and optimize Azure solutions (5\u201310%)</li> <li>Connect to and consume Azure services and third-party services (20\u201325%)</li> </ul> <p>Explore the detailed topics below to dive into each area.</p>"},{"location":"#exam-topics","title":"\ud83d\udcc4 Exam Topics","text":""},{"location":"#1-develop-azure-compute-solutions-2530","title":"1. Develop Azure Compute Solutions (25\u201330%)","text":"<p>Learn to build and deploy compute resources in Azure, including containerized solutions, web apps, and serverless functions.</p> <ul> <li>Implement Containerized Solutions </li> <li>Create and manage container images for solutions  </li> <li>Publish images to Azure Container Registry  </li> <li>Run containers using Azure Container Instance  </li> <li> <p>Create solutions with Azure Container Apps Learn more</p> </li> <li> <p>Implement Azure App Service Web Apps </p> </li> <li>Create an Azure App Service Web App  </li> <li>Configure diagnostics, logging, and TLS settings  </li> <li>Deploy code and containerized solutions  </li> <li> <p>Implement autoscaling and deployment slots  </p> </li> <li> <p>Implement Azure Functions </p> </li> <li>Create and configure Azure Functions apps  </li> <li>Use input/output bindings and triggers (data operations, timers, webhooks)  </li> </ul>"},{"location":"#2-develop-for-azure-storage-1520","title":"2. Develop for Azure Storage (15\u201320%)","text":"<p>Master storage solutions like Cosmos DB and Blob Storage for scalable data management.</p> <ul> <li>Azure Cosmos DB </li> <li>Perform operations on containers and items using the SDK  </li> <li>Set appropriate consistency levels  </li> <li> <p>Implement change feed notifications  </p> </li> <li> <p>Azure Blob Storage </p> </li> <li>Set and retrieve properties/metadata  </li> <li>Perform data operations with the SDK  </li> <li>Implement storage policies and data lifecycle management  </li> </ul>"},{"location":"#3-implement-azure-security-1520","title":"3. Implement Azure Security (15\u201320%)","text":"<p>Secure Azure solutions with authentication, authorization, and encryption.</p> <ul> <li>User Authentication and Authorization </li> <li>Use Microsoft Identity platform and Microsoft Entra ID  </li> <li>Create shared access signatures  </li> <li> <p>Interact with Microsoft Graph  </p> </li> <li> <p>Secure Azure Solutions </p> </li> <li>Use App Configuration or Azure Key Vault for secure app data  </li> <li>Develop code using keys, secrets, and certificates in Key Vault  </li> <li>Implement Managed Identities  </li> </ul>"},{"location":"#4-monitor-troubleshoot-and-optimize-azure-solutions-510","title":"4. Monitor, Troubleshoot, and Optimize Azure Solutions (5\u201310%)","text":"<p>Monitor and improve Azure solutions with Application Insights.</p> <ul> <li>Application Insights </li> <li>Monitor metrics, logs, and traces  </li> <li>Implement web tests and alerts  </li> <li>Instrument apps/services for telemetry  </li> </ul>"},{"location":"#5-connect-to-and-consume-azure-and-third-party-services-2025","title":"5. Connect to and Consume Azure and Third-Party Services (20\u201325%)","text":"<p>Integrate Azure solutions with APIs, events, and external services.</p> <ul> <li>API Management </li> <li>Create and document APIs in Azure API Management  </li> <li> <p>Configure access and implement policies  </p> </li> <li> <p>Event-Based Solutions </p> </li> <li>Use Azure Event Grid and Event Hub for event-driven architectures  </li> </ul>"},{"location":"#getting-started","title":"\ud83d\ude80 Getting Started","text":"<p>To follow this guide:</p> <ol> <li> <p>Use your WGU Azure account Azure Portal.</p> </li> <li> <p>Install Azure CLI    Follow the installation guide.</p> </li> <li> <p>(Optional) Clone this repo    Access all files locally to explore examples and run the guide:</p> </li> </ol> <p><code>powershell    git clone https://github.com/joeywashburn/az204.git    cd az204    mkdocs serve</code></p>"},{"location":"#tips-for-success","title":"\ud83d\udca1 Tips for Success","text":"<ul> <li>Focus on hands-on practice with Azure services using the Azure Free Tier.  </li> <li>Review the official AZ-204 study guide for detailed objectives.  </li> </ul> <p>Happy studying, and good luck on your AZ-204 exam! \ud83c\udf89</p>"},{"location":"acr/","title":"Implement containerized solutions","text":"<p>Docker Application to hit the AZ-204 Exam Topics:</p> <ul> <li>Create and manage container images for solutions</li> <li>Publish an image to Azure Container Registry</li> <li>Run containers by using Azure Container Instance</li> <li>Create solutions by using Azure Container Apps</li> </ul>"},{"location":"acr/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker </li> <li>Python Optional</li> <li>Azure Subscription (Free tier or $200 credit recommended for minimal costs)</li> <li>Existing Resource Group</li> </ul>"},{"location":"acr/#build-the-dockerfile","title":"Build the Dockerfile","text":"<ul> <li>Create a directory for your files</li> </ul> <pre><code>mkdir azurecompute25\ncd azurecompute25\n</code></pre> <ul> <li>Build your Dockerfile</li> </ul> <pre><code>FROM python:3.9-slim\nWORKDIR /app\nCOPY . .\nRUN pip install flask\nEXPOSE 5000\nCMD [\"python\", \"app.py\"]\n</code></pre>"},{"location":"acr/#create-the-flask-app","title":"Create the Flask App","text":"<ul> <li>In that same directory create a new file called app.py</li> </ul> <pre><code>from flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    return 'Hello from Docker!'\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\n</code></pre>"},{"location":"acr/#build-and-test-docker-locally","title":"Build and Test Docker locally","text":"<pre><code>docker build -t whateveryouwant:1.0 .\n</code></pre> <ul> <li>Run docker run -p 5000:5000 whateveryouwant:1.0.</li> <li>Open http://localhost:5000 in a browser (should show \"Hello from Docker!\").</li> <li>Stop the container with Ctrl+C.</li> </ul>"},{"location":"acr/#create-a-container-registry","title":"Create a Container Registry","text":"<ul> <li>Create the ACR</li> </ul> <pre><code>az acr create --resource-group az204 --name acryourname --sku Basic\n</code></pre> <ul> <li>Enable Admin</li> </ul> <pre><code>az acr update -n acryourname --admin-enabled true\n</code></pre> <ul> <li>Get you credentials</li> </ul> <pre><code>az acr credential show --name acryourname\n</code></pre>"},{"location":"acr/#push-the-image-to-acr","title":"Push the Image to ACR","text":"<ul> <li>Log in to ACR:</li> </ul> <pre><code>docker login acryourname.azurecr.io --username &lt;username&gt; --password &lt;password&gt;.\n</code></pre> <ul> <li>Tag the image:</li> </ul> <pre><code>docker tag myapp:1.0 acryourname.azurecr.io/myapp:1.0.\n</code></pre> <ul> <li>Push the image:</li> </ul> <pre><code>docker push acryourname.azurecr.io/myapp:1.0.\n</code></pre> <ul> <li>In the Azure Portal, go to your ACR, click \"Repositories,\" and verify yourapp is there.</li> </ul>"},{"location":"acr/#deploy-container-to-aci","title":"Deploy container to ACI","text":"<pre><code>az container create `\n  --resource-group az204 `\n  --name az204viacli `\n  --os-type Linux `\n  --cpu 1 `\n  --memory 1 `\n  --image acryourname.azurecr.io/myapp:1.0 `\n  --registry-login-server acryourname.azurecr.io `\n  --registry-username &lt;username&gt; `\n  --registry-password &lt;password&gt; `\n  --ports 5000 `\n  --dns-name-label az204viacli `\n  --location westus3\n  ```\n\n- Test your container\n```powershell\naz container show --resource-group az204 --name az204viacli --query ipAddress.fqdn --output tsv \n</code></pre> <ul> <li>Open http://:5000 in a browser (should show \"Hello from Docker!\"). <li>In the Azure Portal, go to your Container Instance and you will see your Container Instance</li>"},{"location":"acr/#deploy-to-container-apps-environment","title":"Deploy to Container Apps Environment","text":"<ul> <li>Create the Container Apps Environment</li> </ul> <pre><code>az containerapp env create `\n  --name az204AppEnv `\n  --resource-group az204 `\n  --location westus3\n</code></pre> <ul> <li>Deploy the app</li> </ul> <pre><code>az containerapp create `\n  --name az204containerapp `\n  --resource-group az204 `\n  --environment az204AppEnv `\n  --image acryourname.azurecr.io/myapp:1.0 `\n  --registry-server acryourname.azurecr.io `\n  --registry-username &lt;username&gt; `\n  --registry-password &lt;password&gt; `\n  --target-port 5000 `\n  --ingress external\n</code></pre> <ul> <li>In the Azure Portal, go to your Resource Group and click on your Container App.  Click the URL to make sure you see Hello from Docker!.</li> </ul>"},{"location":"acr/#clean-up","title":"Clean up","text":"<ul> <li>Optional but recommended</li> <li>Delete all you resources to not go over $200 limit</li> </ul> <pre><code>az group delete -n az204 --no-wait --yes\n</code></pre>"},{"location":"acr/#next-steps","title":"Next Steps","text":"<ul> <li>Do everything again, but this time use only the Portal</li> </ul>"},{"location":"cosmos/","title":"Develop solutions that use Azure Cosmos DB","text":"<p>Cosmos DB to hit the AZ-204 Exam Topics: - Perform operations on containers and items by using the SDK - Set the appropriate consistency level for operations - Implement change feed notifications</p>"},{"location":"cosmos/#prerequisites","title":"Prerequisites","text":"<ul> <li>.NET SDK 8.0 (Install via winget: `winget install Microsoft.DotNet.SDK.8)</li> <li>Azure CLI (Install)</li> <li>Azure Functions Core Tools (Install)</li> <li>Azure Subscription (Free tier or $200 credit recommended)</li> <li>Existing Resource Group (<code>az204exam</code>)</li> </ul>"},{"location":"cosmos/#set-up-cosmos-db","title":"Set Up Cosmos DB","text":"<ol> <li>In the Azure Portal, go to Azure Cosmos DB &gt; Create &gt; Choose NoSQL API.</li> <li>Configure:</li> <li>Resource group: <code>az204exam</code>.</li> <li>Account name: <code>taskmanagercosmos</code> (or unique, e.g., <code>taskmanagercosmosyourname</code>).</li> <li>Leave defaults (e.g., Free tier, multi-region writes off).</li> <li>Review tabs for learning, then Create.</li> </ol>"},{"location":"cosmos/#create-database-and-container","title":"Create Database and Container","text":"<ol> <li>In your Cosmos DB account, go to Data Explorer.</li> <li>Click New Database &gt; Name: <code>TasksDB</code> &gt; Provision throughput (leave default).</li> <li>Click New Container &gt; Use existing database: <code>TasksDB</code>.</li> <li>Container ID: <code>Tasks</code>.</li> <li>Partition key: <code>/id</code>.</li> <li>Throughput: 400 RU/s (manual, minimal for Free tier).</li> <li>Click OK.</li> </ol>"},{"location":"cosmos/#perform-operations-with-the-sdk","title":"Perform Operations with the SDK","text":"<p>Note: We\u2019ll add a Function to create and read tasks in <code>TasksDB/Tasks</code>, keeping our web app in-memory for now.</p> <ol> <li>Add Cosmos DB SDK:</li> <li> <p>In <code>TaskManagerFunctions</code> directory, run:      <code>bash      dotnet add package Microsoft.Azure.Cosmos</code></p> </li> <li> <p>Get Cosmos DB Connection:</p> </li> <li>In the Portal, go to your Cosmos DB account &gt; Keys.</li> <li>Copy the Primary Connection String.</li> <li>In your Function App (<code>taskmanagerfunc-yourname</code>), go to Configuration &gt; Application settings.</li> <li> <p>Add:</p> <ul> <li>Name: <code>CosmosDBConnection</code>.</li> <li>Value: <code>[your-connection-string]</code>.</li> <li>Click OK &gt; Save &gt; Continue to restart.</li> </ul> </li> <li> <p>Create ManageTask Function:</p> </li> <li>Run:      <code>bash      cd TaskManagerFunctions      func new --template \"HttpTrigger\" --name ManageTask</code></li> <li> <p>Edit <code>ManageTask.cs</code>:      ```csharp      using System.IO;      using System.Threading.Tasks;      using Microsoft.AspNetCore.Mvc;      using Microsoft.Azure.Functions.Worker;      using Microsoft.AspNetCore.Http;      using Microsoft.Extensions.Logging;      using Newtonsoft.Json;      using Microsoft.Azure.Cosmos;</p> <p>namespace TaskManagerFunctions  {      public class ManageTask      {          private readonly ILogger _logger;          private readonly CosmosClient _cosmosClient; <pre><code>     public ManageTask(ILogger&lt;ManageTask&gt; logger)\n     {\n         _logger = logger;\n         _cosmosClient = new CosmosClient(Environment.GetEnvironmentVariable(\"CosmosDBConnection\"), new CosmosClientOptions { ConnectionMode = ConnectionMode.Direct });\n     }\n\n     public class TaskItem\n     {\n         public string id { get; set; } = Guid.NewGuid().ToString();\n         public string Title { get; set; }\n         public string Description { get; set; }\n         public string DueDate { get; set; }\n     }\n\n     [Function(\"ManageTask\")]\n     public async Task&lt;IActionResult&gt; Run(\n         [HttpTrigger(AuthorizationLevel.Function, \"post\", \"get\")] HttpRequest req)\n     {\n         _logger.LogInformation(\"Processing task in Cosmos DB.\");\n\n         var container = _cosmosClient.GetContainer(\"TasksDB\", \"Tasks\");\n\n         if (req.Method == \"POST\")\n         {\n             string requestBody = await new StreamReader(req.Body).ReadToEndAsync();\n             TaskItem task = JsonConvert.DeserializeObject&lt;TaskItem&gt;(requestBody);\n\n             if (string.IsNullOrEmpty(task?.Title))\n             {\n                 return new BadRequestObjectResult(\"Please provide a title.\");\n             }\n\n             task.id = Guid.NewGuid().ToString();\n             await container.CreateItemAsync(task, new PartitionKey(task.id));\n             _logger.LogInformation($\"Created task: {task.Title}\");\n             return new OkObjectResult(task);\n         }\n         else // GET\n         {\n             string taskId = req.Query[\"taskId\"];\n             if (string.IsNullOrEmpty(taskId))\n             {\n                 return new BadRequestObjectResult(\"Please provide taskId.\");\n             }\n\n             try\n             {\n                 var task = await container.ReadItemAsync&lt;TaskItem&gt;(taskId, new PartitionKey(taskId));\n                 _logger.LogInformation($\"Read task: {task.Resource.Title}\");\n                 return new OkObjectResult(task.Resource);\n             }\n             catch (CosmosException ex) when (ex.StatusCode == System.Net.HttpStatusCode.NotFound)\n             {\n                 return new NotFoundResult();\n             }\n         }\n     }\n }\n</code></pre> <p>}  ```</p> <li> <p>Test Locally:</p> </li> <li>Update <code>local.settings.json</code>:      <code>json      {          \"IsEncrypted\": false,          \"Values\": {              \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\",              \"FUNCTIONS_WORKER_RUNTIME\": \"dotnet-isolated\",              \"CosmosDBConnection\": \"[your-connection-string]\"          }      }</code></li> <li>Run:      <code>bash      func start</code></li> <li>POST (create task):      <code>bash      curl -X POST http://localhost:7071/api/ManageTask -H \"Content-Type: application/json\" -d '{\"Title\":\"Cosmos Task\",\"Description\":\"Test SDK\",\"DueDate\":\"2025-04-15\"}'</code></li> <li>GET (read task, use <code>id</code> from POST response):      <code>bash      curl http://localhost:7071/api/ManageTask?taskId=[task-id]</code></li> <li> <p>Check Portal &gt; Data Explorer &gt; <code>TasksDB/Tasks</code> for the task.</p> </li> <li> <p>Deploy and Test:</p> </li> <li>Deploy:      <code>bash      func azure functionapp publish taskmanagerfunc-yourname</code></li> <li>Test:      <code>bash      curl -X POST https://taskmanagerfunc-yourname.azurewebsites.net/api/managetask?code=[your-key] -H \"Content-Type: application/json\" -d '{\"Title\":\"Azure Cosmos\",\"Description\":\"Deployed\",\"DueDate\":\"2025-04-15\"}'      curl https://taskmanagerfunc-yourname.azurewebsites.net/api/managetask?code=[your-key]&amp;taskId=[task-id]</code></li> <li>Verify in Data Explorer.</li> <p>Why do this? Creating and reading tasks with the SDK is a core exam skill, and it preps for web app integration.</p>"},{"location":"cosmos/#set-the-appropriate-consistency-level","title":"Set the Appropriate Consistency Level","text":"<p>Note: Cosmos DB offers consistency levels (Strong, Session, Eventual, etc.). We\u2019ll use Session for our tasks, balancing performance and accuracy.</p> <ol> <li>Configure Consistency:</li> <li>In the Portal, go to your Cosmos DB account &gt; Settings &gt; Default consistency.</li> <li>Select Session &gt; Save.</li> <li> <p>Note: <code>ManageTask</code> uses the account\u2019s default (Session) via <code>CosmosClient</code>.</p> </li> <li> <p>Verify in Code:</p> </li> <li>In <code>ManageTask.cs</code>, we initialized:      <code>csharp      _cosmosClient = new CosmosClient(Environment.GetEnvironmentVariable(\"CosmosDBConnection\"), new CosmosClientOptions { ConnectionMode = ConnectionMode.Direct });</code></li> <li> <p>Session ensures clients see their own writes, ideal for task creation/reading.</p> </li> <li> <p>Test Consistency:</p> </li> <li>Run the POST/GET tests above.</li> <li>POST a task, then GET it immediately.</li> <li>Check Data Explorer to confirm the task matches (e.g., same <code>Title</code>).</li> </ol> <p>Why do this? Session consistency is common for apps like ours and often tested in the exam.</p>"},{"location":"cosmos/#implement-change-feed-notifications","title":"Implement Change Feed Notifications","text":"<p>Note: Change feed tracks changes in <code>Tasks</code>. We\u2019ll add a Function to log updates, useful for notifications.</p> <ol> <li>Create Change Feed Function:</li> <li> <p>Run:      <code>bash      cd TaskManagerFunctions      func new --template \"Azure Cosmos DB Trigger\" --name TaskChangeFeed</code></p> </li> <li> <p>Update Function:</p> </li> <li> <p>Edit <code>TaskChangeFeed.cs</code>:      ```csharp      using System.Collections.Generic;      using Microsoft.Azure.Functions.Worker;      using Microsoft.Extensions.Logging;</p> <p>namespace TaskManagerFunctions  {      public class TaskChangeFeed      {          private readonly ILogger _logger; <pre><code>     public TaskChangeFeed(ILogger&lt;TaskChangeFeed&gt; logger)\n     {\n         _logger = logger;\n     }\n\n     [Function(\"TaskChangeFeed\")]\n     public void Run([CosmosDBTrigger(\n         databaseName: \"TasksDB\",\n         containerName: \"Tasks\",\n         Connection = \"CosmosDBConnection\",\n         LeaseContainerName = \"leases\",\n         CreateLeaseContainerIfNotExists = true)] IReadOnlyList&lt;TaskItem&gt; tasks)\n     {\n         foreach (var task in tasks)\n         {\n             _logger.LogInformation($\"Task updated: {task.Title}, ID: {task.id}\");\n         }\n     }\n\n     public class TaskItem\n     {\n         public string id { get; set; }\n         public string Title { get; set; }\n         public string Description { get; set; }\n         public string DueDate { get; set; }\n     }\n }\n</code></pre> <p>}  ```</p> <li> <p>Test Locally:</p> </li> <li>Ensure <code>local.settings.json</code> has <code>CosmosDBConnection</code>.</li> <li>Run:      <code>bash      func start</code></li> <li>POST a task via <code>ManageTask</code> (as above).</li> <li> <p>Check console for \u201cTask updated: [title], ID: [id]\u201d.</p> </li> <li> <p>Deploy and Test:</p> </li> <li>Deploy:      <code>bash      func azure functionapp publish taskmanagerfunc-yourname</code></li> <li>POST a task via <code>ManageTask</code>.</li> <li>Check Portal &gt; Functions &gt; <code>TaskChangeFeed</code> &gt; Monitor &gt; Logs for update logs.</li> <p>Why do this? Change feed is a key exam topic, showing how to react to data changes (e.g., for notifications).</p>"},{"location":"cosmos/#next-steps","title":"Next Steps","text":"<ul> <li>Connect <code>TaskManagerWeb</code> to Cosmos DB to replace in-memory tasks.</li> <li>Link <code>TaskManagerWeb</code> to Blob Storage for file uploads.</li> <li>Add diagnostics (Application Insights) for Cosmos operations.</li> </ul>"},{"location":"functions/","title":"Create Azure Functions for APIs","text":"<p>Functions App to hit the AZ-204 Exam Topics:</p> <ul> <li>Create and configure an Azure Functions app</li> <li>Implement input and output bindings</li> <li>Implement function triggers by using data operations, timers, and webhooks</li> </ul>"},{"location":"functions/#prerequisites","title":"Prerequisites","text":"<ul> <li>.NET SDK 8.0 (Install via winget: <code>winget install Microsoft.DotNet.SDK.8</code>)</li> <li>Azure CLI (Install)</li> <li>Azure Functions Core Tools (Install)</li> <li>Azure Subscription (Free tier or $200 credit recommended for minimal costs)</li> <li>Azurite (Install)</li> <li>Existing Resource Group</li> </ul>"},{"location":"functions/#setup-azure-functions-app","title":"Setup Azure Functions App","text":"<p>In the Azure Portal, create a new Function App:  - Check out the tabs for learning experience, we are leaving them default</p> <p></p> <p>From your root directory build your function</p> <pre><code>func init TaskManagerFunctions --dotnet-isolated --target-framework net8.0\n</code></pre> <p>Move into the TaskManagerFunctions dir</p> <pre><code>cd TaskManagerFunctions\n</code></pre> <p>Build the function</p> <pre><code>func new --template \"HttpTrigger\" --name CreateTask\n</code></pre> <p>Test your function locally first</p> <pre><code>func start\n</code></pre> <p>You should see output like</p> <pre><code>Functions:\n    CreateTask: [GET,POST] http://localhost:7071/api/CreateTask\n</code></pre> <p>Open a browser and go to:</p> <pre><code>http://localhost:7071/api/CreateTask?name=Test\n</code></pre> <p>Expected response should be something like this:</p> <pre><code>This HTTP triggered function executed successfully. Pass a name in the query string or in the request body for a personalized response.\n</code></pre> <p>Deploy to Azure: </p> <pre><code>func azure functionapp publish taskmanagerfunc-yourname #replace with your function name\n</code></pre> <p>Watch for the \u201cFunctions in taskmanagerfunc-yourname\u201d section in the output. It should list:</p> <pre><code>Functions in taskmanagerfunc-yourname:\n    CreateTask - [httpTrigger]\n        Invoke url: https://taskmanagerfunc-yourname.azurewebsites.net/api/createtask?code=...\n</code></pre> <p>Retrieve the Function Key</p> <pre><code>az functionapp function keys list --resource-group az204exam --name taskmanagerfunc-yourname --function-name CreateTask\n</code></pre> <p>Save the default key value.  We are going to use it in the next step.</p> <p>Test it out: - Construct the URL you need to test - Take your invoke url from Step 5 and append your default key.  It should look something like this</p> <pre><code>https://taskmanagerfunc-jwashburn.azurewebsites.net/api/createtask?code=THISISYOURCODEFROMSTEP7&amp;name=Test\n</code></pre> <ul> <li>You should see something like:</li> </ul> <pre><code>Hello, Test. This HTTP triggered function executed successfully.\n</code></pre>"},{"location":"functions/#add-blob-storage-placeholder","title":"Add Blob Storage (Placeholder)","text":"<p>Note: We\u2019ll use Blob Storage to store tasks, prepping for Cosmos DB later.  Blob Storage and Cosmos DB are in a separate Exam Topic, but we need to create a Storage Account for use in triggers and outputs.</p> <p>Create Storage Account: - In the Azure Portal, create a Storage Account:</p> <p>Name: <code>taskmanagerstoreyourname</code>.</p> <p>Resource group: <code>az204</code>.</p> <p>Region: <code>West US3</code></p> <p>Primary Service: <code>Azure Blob Storage or Azure Data Lake Storage Gen 2</code></p> <p>Redundacy: <code>LRS</code></p> <p>After Creation:</p> <p>Go to Data Storage &gt; Containers &gt; Create container named <code>tasks</code>.</p> <p>Get Connection String:</p> <ul> <li>In the Storage Account, go to Access keys.</li> <li>Copy the Connection string for <code>key1</code>.</li> </ul> <p>Add to Function App:</p> <ul> <li>In your Function App (<code>taskmanagerfunc-yourname</code>), go to Settings &gt; Environment Variables.</li> <li>Click New+ Add Button.</li> <li>Name: <code>StorageConnection</code>, Value: <code>[your-connection-string]</code>.</li> <li>Save and restart.</li> </ul>"},{"location":"functions/#implement-input-and-output-bindings","title":"Implement Input and Output Bindings","text":"<p>Note: We\u2019ll use HTTP to read task data (input) and Blob Storage to save tasks (output), matching our web app\u2019s tasks.</p> <p>Add Blob SDK:</p> <ul> <li>In <code>TaskManagerFunctions</code> directory run:</li> </ul> <pre><code>dotnet add package Microsoft.Azure.Functions.Worker\ndotnet add package Microsoft.Azure.Functions.Worker.Sdk\ndotnet add package Microsoft.Azure.Functions.Worker.Extensions.Storage\ndotnet add package Microsoft.Azure.Functions.Worker.Extensions.Http\ndotnet add package Microsoft.Azure.Functions.Worker.Extensions.Storage\n</code></pre> <p>Update CreateTask Function:</p> <p>Replace CreateTask.cs with:</p> <pre><code>using System;\nusing System.IO;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.Azure.Functions.Worker;\nusing Microsoft.Azure.Functions.Worker.Http;\nusing Microsoft.Extensions.Logging;\n\nnamespace TaskManagerFunctions\n{\n    public class CreateTask\n    {\n        private readonly ILogger&lt;CreateTask&gt; _logger;\n\n        public CreateTask(ILogger&lt;CreateTask&gt; logger)\n        {\n            _logger = logger;\n        }\n\n        public class TaskItem\n        {\n            public string Id { get; set; } = Guid.NewGuid().ToString();\n            public string? Title { get; set; } // Nullable to avoid CS8618\n            public string? Description { get; set; } // Nullable\n            public string? DueDate { get; set; } // Nullable\n        }\n\n        [Function(\"CreateTask\")]\n        public async Task&lt;MultiOutput&gt; Run(\n            [HttpTrigger(AuthorizationLevel.Function, \"post\", Route = null)] HttpRequestData req)\n        {\n            _logger.LogInformation(\"Creating new task.\");\n\n            // Read the request body\n            string requestBody = await new StreamReader(req.Body).ReadToEndAsync();\n            TaskItem? task = JsonSerializer.Deserialize&lt;TaskItem&gt;(requestBody, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n\n            if (task == null || string.IsNullOrEmpty(task.Title))\n            {\n                var badRequestResponse = req.CreateResponse(System.Net.HttpStatusCode.BadRequest);\n                await badRequestResponse.WriteStringAsync(\"Please provide a valid task with a title.\");\n                return new MultiOutput\n                {\n                    Response = badRequestResponse,\n                    BlobOutput = null\n                };\n            }\n\n            // Generate a new ID for the task\n            task.Id = Guid.NewGuid().ToString();\n            _logger.LogInformation($\"Saving task: {task.Title}\");\n\n            // Serialize the task to JSON for Blob storage\n            string blobOutput = JsonSerializer.Serialize(task);\n\n            // Return a success response\n            var response = req.CreateResponse(System.Net.HttpStatusCode.OK);\n            await response.WriteAsJsonAsync(task);\n\n            return new MultiOutput\n            {\n                Response = response,\n                BlobOutput = blobOutput\n            };\n        }\n\n        // Define the multi-output response\n        public class MultiOutput\n        {\n            public HttpResponseData Response { get; set; }\n            [BlobOutput(\"tasks/{Id}.json\", Connection = \"AzureWebJobsStorage\")]\n            public string BlobOutput { get; set; }\n        }\n    }\n}\n</code></pre> <p>Test Locally:</p> <p>Update local.settings.json:</p> <pre><code>{\n    \"IsEncrypted\": false,\n    \"Values\": {\n      \"AzureWebJobsStorage\": \"DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;\",\n      \"FUNCTIONS_WORKER_RUNTIME\": \"dotnet-isolated\"\n    }\n  }\n</code></pre> <p>Run:</p> <pre><code>func start\n</code></pre> <p>POST with curl or Postman:</p> <pre><code>curl -X POST http://localhost:7071/api/CreateTask -H \"Content-Type: application/json\" -d '{\"Title\":\"Test Task\",\"Description\":\"Do this\",\"DueDate\":\"2025-04-15\"}'\n</code></pre> <p>Check the tasks container (local Azurite or Portal) for a [guid].json file with the task JSON.</p> <p>Deploy and Test: Deploy:</p> <pre><code>func azure functionapp publish taskmanagerfunc-yourname\n</code></pre> <p>Test:</p> <pre><code>curl -X POST https://taskmanagerfunc-yourname.azurewebsites.net/api/createtask?code=[your-key] -H \"Content-Type: application/json\" -d '{\"Title\":\"Azure Task\",\"Description\":\"Deployed\",\"DueDate\":\"2025-04-15\"}'\n</code></pre> <p>Verify the tasks container in the Portal has a new JSON file.</p> <p>Why do this? HTTP input reads task data, Blob output saves it, hitting exam goals. Preps for Cosmos DB without needing it now.</p>"},{"location":"functions/#implement-function-triggers","title":"Implement Function Triggers","text":"<p>Note: Our HTTP trigger covers webhooks. We\u2019ll add a timer trigger and Blob trigger for data operations.</p> <p>Add a Timer Trigger:</p> <p>In TaskManagerFunctions, create:</p> <pre><code>func new --template \"TimerTrigger\" --name CheckTasks\n</code></pre> <p>Edit CheckTasks.cs:</p> <pre><code>using Microsoft.Azure.Functions.Worker;\nusing Microsoft.Extensions.Logging;\n\nnamespace TaskManagerFunctions\n{\n    public class CheckTasks\n    {\n        private readonly ILogger&lt;CheckTasks&gt; _logger;\n\n        public CheckTasks(ILogger&lt;CheckTasks&gt; logger)\n        {\n            _logger = logger;\n        }\n\n        [Function(\"CheckTasks\")]\n        public void Run([TimerTrigger(\"0 */5 * * * *\")] TimerInfo myTimer)\n        {\n            _logger.LogInformation($\"Timer triggered at: {DateTime.Now}\");\n            _logger.LogInformation(\"Checking tasks (placeholder for future logic)...\");\n        }\n    }\n}\n</code></pre> <p>Note: Runs every 5 minutes.</p> <p>Add a Blob Trigger:</p> <p>Create:</p> <pre><code>func new --template \"BlobTrigger\" --name ProcessTask\n</code></pre> <p>Edit ProcessTask.cs:</p> <pre><code>\nusing Microsoft.Azure.Functions.Worker;\nusing Microsoft.Extensions.Logging;\n\nnamespace TaskManagerFunctions\n{\n    public class ProcessTask\n    {\n        private readonly ILogger&lt;ProcessTask&gt; _logger;\n\n        public ProcessTask(ILogger&lt;ProcessTask&gt; logger)\n        {\n            _logger = logger;\n        }\n\n        [Function(\"ProcessTask\")]\n        public void Run([BlobTrigger(\"tasks/{name}.json\", Connection = \"StorageConnection\")] string taskJson)\n        {\n            _logger.LogInformation($\"New task file detected: {taskJson}\");\n        }\n    }\n}\n</code></pre> <p>Test Locally:</p> <p>Ensure local.settings.json has StorageConnection.</p> <p>Run:</p> <pre><code>func start\n</code></pre> <p>For timer: Wait 5 minutes, see \u201cChecking tasks...\u201d in console.</p> <p>For Blob: Add a JSON file to tasks (via Azurite or Portal), check console for \u201cNew task file detected...\u201d.</p> <p>Deploy and Test:</p> <pre><code>func azure functionapp publish taskmanagerfunc-yourname\n</code></pre> <p>Timer: Wait 5 minutes, check Portal &gt; Functions &gt; CheckTasks &gt; Monitor &gt; Logs.</p> <p>Blob: Upload a JSON to tasks container, check ProcessTask logs.</p> <p>Why do this? Timer (scheduled), Blob (data operation), and HTTP (webhook) triggers cover all exam requirements.</p>"},{"location":"functions/#next-steps","title":"Next Steps","text":"<ul> <li>Do everything again, but this time, but use the CLI where possible.</li> <li>If you are going to take break, you could clean up here, but the next section builds on what we have done here.</li> </ul>"},{"location":"storage/","title":"Develop solutions that use Azure Blob Storage","text":"<p>Blob Storage to hit the AZ-204 Exam Topics:</p> <ul> <li>Set and retrieve properties and metadata</li> <li>Perform operations on data by using the appropriate SDK</li> <li>Implement storage policies and data lifecycle management</li> </ul>"},{"location":"storage/#prerequisites","title":"Prerequisites","text":"<ul> <li>.NET SDK 8.0 (Install via winget: `winget install Microsoft.DotNet.SDK.8))</li> <li>Azure CLI (Install)</li> <li>Azure Functions Core Tools (Install)</li> <li>Azure Subscription (Free tier or $200 credit recommended)</li> <li>Existing Resource Group (<code>az204exam</code>)</li> </ul>"},{"location":"storage/#set-up-blob-storage","title":"Set Up Blob Storage","text":"<p>Note: We set up <code>taskmanagerstoreyourname</code> in Functions for task JSONs (<code>tasks</code> container). Here, we\u2019ll add <code>attachments</code> for files to keep them separate.</p> <p>Verify Storage Account:</p> <ul> <li>In the Azure Portal, go to Storage accounts.</li> <li>Find <code>taskmanagerstoreyiourname</code></li> <li>If missing, create:</li> </ul> <p>Name: <code>taskmanagerstoreyourname</code>.</p> <p>Resource group: <code>az204</code></p> <p>Region: <code>West US3</code></p> <p>Primary Service: <code>Azure Blob Storage or Azure Data Lake Storage Gen 2</code></p> <p>Redundacy: <code>LRS</code></p> <p>After Creation:</p> <p>Create Attachments Container:</p> <ul> <li>In <code>taskmanagerstoreyourname</code>, go to Containers &gt; + Container.</li> <li>Name: <code>attachments</code>.</li> <li>Click Create.</li> </ul> <p>Confirm Connection String:</p> <ul> <li>Go to Access keys &gt; Copy Connection string for <code>key1</code>.</li> <li>In your Function App (<code>taskmanagerfunc-yourname</code>), go to Configuration &gt; Application settings.</li> <li>Verify <code>StorageConnection</code> (from Functions). If missing, add:</li> <li>Name: <code>StorageConnection</code>, Value: <code>[your-connection-string]</code>.</li> <li>Save and restart.</li> </ul>"},{"location":"storage/#perform-operations-with-the-sdk","title":"Perform Operations with the SDK","text":"<p>Note: We\u2019ll add Functions to upload and download files to <code>attachments</code> using the Blob SDK, prepping for web app file uploads.</p> <p>Add Blob SDK:</p> <ul> <li>In <code>TaskManagerFunctions</code>, run (if not added):</li> </ul> <pre><code>dotnet add package Azure.Storage.Blobs\n</code></pre> <p>Create Upload Function:</p> <pre><code>cd TaskManagerFunctions\nfunc new --template \"HttpTrigger\" --name UploadAttachment\n</code></pre> <ul> <li>Edit <code>UploadAttachment.cs</code>:</li> </ul> <pre><code>using System;\nusing System.IO;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Azure.Functions.Worker;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.Logging;\nusing Azure.Storage.Blobs;\nusing Azure.Storage.Blobs.Models;\n\nnamespace TaskManagerFunctions\n{\n    public class UploadAttachment\n    {\n        private readonly ILogger&lt;UploadAttachment&gt; _logger;\n\n        public UploadAttachment(ILogger&lt;UploadAttachment&gt; logger)\n        {\n            _logger = logger;\n        }\n\n        [Function(\"UploadAttachment\")]\n        public async Task&lt;IActionResult&gt; Run(\n            [HttpTrigger(AuthorizationLevel.Function, \"post\")] HttpRequest req)\n        {\n            try\n            {\n                _logger.LogInformation(\"Uploading file to attachments.\");\n\n                // Validate content type\n                if (!req.HasFormContentType)\n                {\n                    _logger.LogWarning(\"Invalid content type: {ContentType}\", req.ContentType);\n                    return new BadRequestObjectResult(\"Please send a multipart form.\");\n                }\n\n                // Parse form\n                var form = await req.ReadFormAsync();\n                var file = form.Files.FirstOrDefault();\n                var taskId = form[\"taskId\"];\n\n                _logger.LogInformation(\"Form parsed. File: {FileName}, TaskId: {TaskId}\", file?.FileName, taskId);\n\n                // Validate form data\n                if (file == null || string.IsNullOrEmpty(taskId))\n                {\n                    _logger.LogWarning(\"Missing file or taskId.\");\n                    return new BadRequestObjectResult(\"Please provide a file and taskId.\");\n                }\n\n                // Get storage connection\n                var connectionString = Environment.GetEnvironmentVariable(\"StorageConnection\");\n                if (string.IsNullOrEmpty(connectionString))\n                {\n                    _logger.LogError(\"StorageConnection environment variable is missing or empty.\");\n                    return new StatusCodeResult(500);\n                }\n\n                // Initialize blob client\n                _logger.LogInformation(\"Initializing BlobServiceClient.\");\n                var blobServiceClient = new BlobServiceClient(connectionString);\n                var containerClient = blobServiceClient.GetBlobContainerClient(\"attachments\");\n\n                // Create container if it doesn't exist\n                _logger.LogInformation(\"Ensuring attachments container exists.\");\n                await containerClient.CreateIfNotExistsAsync();\n\n                // Upload blob\n                var blobName = $\"{taskId}/{file.FileName}\";\n                var blobClient = containerClient.GetBlobClient(blobName);\n                _logger.LogInformation(\"Uploading file to blob: {BlobName}\", blobName);\n\n                using (var stream = file.OpenReadStream())\n                {\n                    await blobClient.UploadAsync(stream, new BlobUploadOptions\n                    {\n                        HttpHeaders = new BlobHttpHeaders { ContentType = file.ContentType },\n                        Metadata = new Dictionary&lt;string, string&gt; { { \"TaskId\", taskId } }\n                    });\n                }\n\n                _logger.LogInformation(\"Uploaded: {BlobName}\", blobName);\n                return new OkObjectResult($\"File uploaded: {blobName}\");\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Failed to upload file. Exception: {Message}, StackTrace: {StackTrace}\", ex.Message, ex.StackTrace);\n                return new ObjectResult($\"Error uploading file: {ex.Message}\") { StatusCode = 500 };\n            }\n        }\n    }\n}\n</code></pre> <p>Test Locally: OPTIONAL</p> <ul> <li>Update <code>local.settings.json</code>:</li> </ul> <pre><code>{\n    \"IsEncrypted\": false,\n    \"Values\": {\n        \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\",\n        \"FUNCTIONS_WORKER_RUNTIME\": \"dotnet-isolated\",\n        \"StorageConnection\": \"[your-connection-string]\"\n    }\n}\n</code></pre> <p>Run:</p> <pre><code>func start\n</code></pre> <ul> <li>POST (use Postman or curl, with a file like <code>test.txt</code>):</li> </ul> <pre><code>curl -X POST http://localhost:7071/api/UploadAttachment -F \"taskId=test123\" -F \"file=@test.txt\"\n</code></pre> <p>Check <code>attachments</code> container (Azurite or Portal) for <code>test123/test.txt</code>.</p> <p>Deploy and Test:</p> <p>Deploy:</p> <pre><code>func azure functionapp publish taskmanagerfunc-yourname\n</code></pre> <pre><code>az functionapp function keys list --name TaskManagerFunc-jwashburn --resource-group az204 --function-name UplpadAttachment\n</code></pre> <p>Test:</p> <pre><code>curl -X POST https://taskmanagerfunc-yourname.azurewebsites.net/api/uploadattachment?code=[your-key] -F \"taskId=test123\" -F \"file=@test.txt\"\n</code></pre> <ul> <li>Verify in Portal &gt; <code>taskmanagerstore</code> &gt; <code>attachments</code>.</li> </ul> <p>Why do this? Uploads files with the SDK, showing create operations for the exam.</p>"},{"location":"storage/#set-and-retrieve-properties-and-metadata","title":"Set and Retrieve Properties and Metadata","text":"<p>Note: We\u2019ll get the file\u2019s content type and metadata (task ID) to show exam skills.</p> <p>Create Download Function:</p> <p>Run:</p> <pre><code>cd TaskManagerFunctions\nfunc new --template \"HttpTrigger\" --name GetAttachment\n</code></pre> <p>Edit <code>GetAttachment.cs</code>:</p> <pre><code>using System;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Azure.Functions.Worker;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.Logging;\nusing Azure.Storage.Blobs;\nusing Azure;\n\nnamespace TaskManagerFunctions\n{\n    public class GetAttachment\n    {\n        private readonly ILogger&lt;GetAttachment&gt; _logger;\n\n        public GetAttachment(ILogger&lt;GetAttachment&gt; logger)\n        {\n            _logger = logger;\n        }\n\n        [Function(\"GetAttachment\")]\n        public async Task&lt;IActionResult&gt; Run(\n            [HttpTrigger(AuthorizationLevel.Function, \"get\")] HttpRequest req)\n        {\n            try\n            {\n                _logger.LogInformation(\"Retrieving file metadata.\");\n\n                // Validate query parameters\n                string? taskId = req.Query[\"taskId\"];\n                string? fileName = req.Query[\"fileName\"];\n                _logger.LogInformation(\"Query parameters: taskId={TaskId}, fileName={FileName}\", taskId, fileName);\n\n                if (string.IsNullOrEmpty(taskId) || string.IsNullOrEmpty(fileName))\n                {\n                    _logger.LogWarning(\"Missing taskId or fileName in query parameters.\");\n                    return new BadRequestObjectResult(\"Please provide taskId and fileName.\");\n                }\n\n                // Get storage connection\n                var connectionString = Environment.GetEnvironmentVariable(\"StorageConnection\");\n                if (string.IsNullOrEmpty(connectionString))\n                {\n                    _logger.LogError(\"StorageConnection environment variable is missing or empty.\");\n                    return new StatusCodeResult(500);\n                }\n\n                // Initialize blob client\n                _logger.LogInformation(\"Initializing BlobServiceClient.\");\n                var blobServiceClient = new BlobServiceClient(connectionString);\n                var containerClient = blobServiceClient.GetBlobContainerClient(\"attachments\");\n                var blobName = $\"{taskId}/{fileName}\";\n                var blobClient = containerClient.GetBlobClient(blobName);\n                _logger.LogInformation(\"Accessing blob: {BlobName}\", blobName);\n\n                // Get blob properties\n                var properties = await blobClient.GetPropertiesAsync();\n                var metadata = properties.Value.Metadata;\n                var contentType = properties.Value.ContentType;\n\n                // Safely access metadata\n                string? metadataTaskId = metadata.ContainsKey(\"TaskId\") ? metadata[\"TaskId\"] : null;\n\n                _logger.LogInformation(\"Blob properties retrieved. TaskId={TaskId}, ContentType={ContentType}, Uri={Uri}\",\n                    metadataTaskId, contentType, blobClient.Uri);\n\n                return new OkObjectResult(new\n                {\n                    TaskId = metadataTaskId,\n                    ContentType = contentType,\n                    Uri = blobClient.Uri\n                });\n            }\n            catch (RequestFailedException ex) when (ex.Status == 404)\n            {\n                _logger.LogWarning(\"Blob not found: {ErrorMessage}\", ex.Message);\n                return new NotFoundResult();\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Failed to retrieve file metadata. Exception: {Message}, StackTrace: {StackTrace}\",\n                    ex.Message, ex.StackTrace);\n                return new ObjectResult($\"Error retrieving file metadata: {ex.Message}\") { StatusCode = 500 };\n            }\n        }\n    }\n}\n</code></pre> <p>Test Locally: OPTIONAL</p> <p>Run:</p> <pre><code>func start\n</code></pre> <p>GET:</p> <pre><code>curl http://localhost:7071/api/GetAttachment?taskId=test123&amp;fileName=test.txt\n</code></pre> <ul> <li>Expect JSON: <code>{\"TaskId\":\"test123\",\"ContentType\":\"text/plain\",\"Uri\":\"...\"}</code>.</li> </ul> <p>Deploy and Test:</p> <p>Deploy:</p> <pre><code>func azure functionapp publish taskmanagerfunc-yourname\n</code></pre> <p>Retrive your Key:</p> <pre><code>az functionapp function keys list --name TaskManagerFunc-jwashburn --resource-group az204 --function-name GetAttachment\n</code></pre> <p>Test:</p> <pre><code>curl https://taskmanagerfunc-jwashburn.azurewebsites.net/api/GetAttachment?code=[yourkey]&amp;taskId=test123&amp;fileName=test.txt\n</code></pre> <p>Verify metadata and properties.</p> <p>Why do this? Shows setting and getting metadata/properties, a key exam topic.</p>"},{"location":"storage/#implement-storage-policies-and-data-lifecycle-management","title":"Implement Storage Policies and Data Lifecycle Management","text":"<p>Note: We\u2019ll archive old files in <code>attachments</code> to manage costs.</p> <p>Create Lifecycle Rule:</p> <ul> <li>In the Portal, go to <code>taskmanagerstore</code> &gt; Data Management &gt; Lifecycle management &gt; Add rule**.</li> <li>Rule name: <code>ArchiveOldFiles</code>.</li> <li> <p>Scope: Filter to <code>attachments/</code> (type <code>attachments/</code> in Blob prefix).</p> </li> <li> <p>Conditions:</p> <ul> <li>Blob type: Block blobs.</li> <li>Not modified for 1 days.</li> </ul> </li> <li> <p>Actions:</p> <ul> <li>Delete Blob</li> <li>Feel free to set up your own rules here</li> </ul> </li> <li> <p>Click Add.</p> </li> </ul> <p>Verify:</p> <ul> <li>Upload a file via <code>UploadAttachment</code>.</li> <li>Wait 30 days (or use a test account to simulate).</li> <li>Check <code>attachments</code> &gt; Confirm old files show Cool tier in Access tier.</li> </ul> <p>Why do this? Lifecycle rules reduce storage costs, an exam must-know.</p>"},{"location":"storage/#next-steps","title":"Next Steps","text":"<ul> <li>Connect <code>TaskManagerWeb</code> to call <code>UploadAttachment</code> for</li> </ul>"},{"location":"webapp/","title":"Implement Azure App Service Web Apps","text":"<p>Web App to hit the AZ-204 Exam Topics:</p> <ul> <li>Create an Azure App Service Web App</li> <li>Configure and implement diagnostics and logging</li> <li>Deploy code and containerized solutions</li> <li>Configure settings including Transport Layer Security (TLS), API settings, and service connections</li> <li>Implement autoscaling</li> <li>Configure deployment slots</li> </ul>"},{"location":"webapp/#prerequisites","title":"Prerequisites","text":"<ul> <li>.NET SDK 8.0 (Install via winget: <code>winget install Microsoft.DotNet.SDK.8</code>)</li> <li>Azure CLI (Install)</li> <li>Azure Functions Core Tools (Install)</li> <li>Azure Subscription (Free tier or $200 credit recommended for minimal costs)</li> <li>Existing Resource Group</li> </ul>"},{"location":"webapp/#set-up-azure-app-service","title":"Set Up Azure App Service","text":"<p>In the Azure Portal, create a new App Service:</p> <ul> <li>Use the Free F1 tier to avoid costs.</li> <li>Note the app name (e.g., <code>taskmanagerweb-yourname</code>) and resource group (e.g., <code>az204exam</code>).</li> <li>Check out the tabs for learning experience, we are leaving them default</li> </ul> <p></p> <p>Once its built, hit the URL to see that its up</p> <p> Create a .NET Core MVC app locally:</p> <pre><code>dotnet new mvc -o TaskManagerWeb\ncd TaskManagerWeb\ndotnet run\n</code></pre> <p>Verify the app runs at http://localhost:port</p> <p>Launch vscode or whatever editor you like.</p> <pre><code>code.\n</code></pre> <p>Browse into the Models directory under TaskManagerWeb.</p> <p>Add TaskItem.cs:</p> <pre><code>    namespace TaskManagerWeb.Models\n    {\n        public class TaskItem\n        {\n            public string id { get; set; } = System.Guid.NewGuid().ToString();\n            public string? Title { get; set; }\n            public string? Description { get; set; }\n            public string? DueDate { get; set; }\n        }\n    }\n</code></pre> <p>Update Controllers/HomeController.cs to handle tasks (in-memory for now):</p> <pre><code>using Microsoft.AspNetCore.Mvc;\nusing TaskManagerWeb.Models;\nusing System.Collections.Generic;\n\nnamespace TaskManagerWeb.Controllers\n{\n    public class HomeController : Controller\n    {\n        private static List&lt;TaskItem&gt; _tasks = new List&lt;TaskItem&gt;();\n\n        public IActionResult Index()\n        {\n            return View(_tasks);\n        }\n\n        [HttpPost]\n        public IActionResult Create(string title, string description, DateTime dueDate)\n        {\n            var task = new TaskItem\n            {\n                Title = title,\n                Description = description,\n                DueDate = dueDate.ToString(\"yyyy-MM-dd\") // Convert DateTime to string\n            };\n            _tasks.Add(task);\n            return RedirectToAction(\"Index\");\n        }\n    }\n}\n</code></pre>"},{"location":"webapp/#modify-the-home-page-view-to-add-a-form","title":"Modify the Home Page View to Add a Form","text":"<p>The view (Index.cshtml) defines the UI, including the form for adding tasks and a list to display them.</p> <p>Open Views/Home/Index.cshtml.</p> <p>Replace the default content with:</p> <pre><code>@model List&lt;TaskManagerWeb.Models.TaskItem&gt;\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;Task Manager&lt;/title&gt;\n    &lt;style&gt;\n        &lt;text&gt;\n        body {\n            font-family: 'Segoe UI', Arial, sans-serif;\n            background-color: #f4f6f9;\n            color: #333;\n            margin: 0;\n            padding: 20px;\n            line-height: 1.6;\n        }\n\n        h1 {\n            color: #2c3e50;\n            text-align: center;\n            margin-bottom: 20px;\n        }\n\n        h2 {\n            color: #34495e;\n            margin-top: 30px;\n            border-bottom: 2px solid #3498db;\n            padding-bottom: 5px;\n        }\n\n        form {\n            background: #fff;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n            max-width: 500px;\n            margin: 0 auto;\n        }\n\n        div {\n            margin-bottom: 15px;\n        }\n\n        label {\n            display: block;\n            font-weight: 600;\n            margin-bottom: 5px;\n            color: #2c3e50;\n        }\n\n        input[type=\"text\"],\n        textarea,\n        input[type=\"date\"] {\n            width: 100%;\n            padding: 10px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            font-size: 14px;\n            box-sizing: border-box;\n        }\n\n        textarea {\n            resize: vertical;\n            min-height: 100px;\n        }\n\n        input:focus,\n        textarea:focus {\n            outline: none;\n            border-color: #3498db;\n            box-shadow: 0 0 5px rgba(52, 152, 219, 0.3);\n        }\n\n        button {\n            background-color: #3498db;\n            color: #fff;\n            padding: 10px 20px;\n            border: none;\n            border-radius: 4px;\n            font-size: 16px;\n            cursor: pointer;\n            transition: background-color 0.3s;\n        }\n\n        button:hover {\n            background-color: #2980b9;\n        }\n\n        ul {\n            list-style: none;\n            padding: 0;\n            max-width: 600px;\n            margin: 20px auto;\n        }\n\n        li {\n            background: #fff;\n            padding: 15px;\n            margin-bottom: 10px;\n            border-radius: 6px;\n            box-shadow: 0 1px 5px rgba(0, 0, 0, 0.1);\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n\n        li.no-tasks {\n            color: #7f8c8d;\n            font-style: italic;\n            text-align: center;\n            box-shadow: none;\n        }\n\n        .task-info {\n            flex-grow: 1;\n        }\n\n        .task-info strong {\n            color: #2c3e50;\n        }\n\n        @@media (max-width: 600px) {\n            form, ul {\n                padding: 10px;\n            }\n\n            li {\n                flex-direction: column;\n                align-items: flex-start;\n            }\n        }\n        &lt;/text&gt;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Task Manager&lt;/h1&gt;\n\n    &lt;form asp-action=\"Create\" method=\"post\"&gt;\n        &lt;div&gt;\n            &lt;label&gt;Title:&lt;/label&gt;\n            &lt;input type=\"text\" name=\"title\" required /&gt;\n        &lt;/div&gt;\n        &lt;div&gt;\n            &lt;label&gt;Description:&lt;/label&gt;\n            &lt;textarea name=\"description\"&gt;&lt;/textarea&gt;\n        &lt;/div&gt;\n        &lt;div&gt;\n            &lt;label&gt;Due Date:&lt;/label&gt;\n            &lt;input type=\"date\" name=\"dueDate\" required /&gt;\n        &lt;/div&gt;\n        &lt;button type=\"submit\"&gt;Add Task&lt;/button&gt;\n    &lt;/form&gt;\n\n    &lt;h2&gt;Tasks&lt;/h2&gt;\n    &lt;ul&gt;\n        @if (Model != null &amp;&amp; Model.Any())\n        {\n            foreach (var task in Model)\n            {\n                &lt;li&gt;\n                    &lt;div class=\"task-info\"&gt;\n                        &lt;strong&gt;@task.Title&lt;/strong&gt; - @task.Description\n                        &lt;br /&gt;\n                        &lt;small&gt;Due: @(task.DueDate ?? \"No due date\")&lt;/small&gt;\n                    &lt;/div&gt;\n                &lt;/li&gt;\n            }\n        }\n        else\n        {\n            &lt;li class=\"no-tasks\"&gt;No tasks yet.&lt;/li&gt;\n        }\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Test the app works locally</p> <pre><code>dotnet run\n</code></pre>"},{"location":"webapp/#deploy-to-azure-app-service","title":"Deploy to Azure App Service","text":"<p>Push the app you created up to the Azure App Service we previously made.</p> <pre><code>az webapp up --name taskmanagerweb-yourname --resource-group az204exam --sku F1 --location yourlocation --runtime \"dotnet:8\"\n</code></pre> <p>Test the app in your browser.  You should be able to get the URL from the App Service Overview page</p>"},{"location":"webapp/#configure-settings-tls-api-settings-service-connections","title":"Configure Settings (TLS, API Settings, Service Connections)","text":"<p>Add App Settings:</p> <ul> <li>Go to Settings &gt; Environment Variables.</li> <li>Click + Add Button.</li> <li>Name: <code>CosmosDBConnection</code>, Value: <code>placeholder</code> (we\u2019ll use this later for Cosmos DB).</li> <li>Click Apply &gt; Apply &gt; Confirm to restart the app.</li> </ul> <p>Set Up Managed Identity:</p> <ul> <li>Go to Identity &gt; System assigned.</li> <li>Turn Status to On &gt; Save.</li> <li>Note: This lets the app securely connect to other Azure services (like Cosmos DB) without passwords later.</li> </ul> <p>Verify:</p> <ul> <li>Check Environment Variables in the Portal to see <code>CosmosDBConnection</code>.</li> <li>No code changes needed, but the app is ready for future connections.</li> </ul>"},{"location":"webapp/#implement-autoscaling","title":"Implement Autoscaling","text":"<p>Note: Autoscaling requires a Standard (S1) or higher tier.  You will have to chase this thread on your own</p>"},{"location":"webapp/#configure-deployment-slots","title":"Configure Deployment Slots","text":"<p>Note: Deployment slots need a Standard (S1) or higher tier, not Free F1. You will have to chase this thread on your own</p>"},{"location":"webapp/#next-steps","title":"Next Steps","text":"<ul> <li>Do everything again, but this time use the CLI to build the Web App.</li> <li>If you are going to take break, you could clean up here, but the next section builds on what we have done here.</li> </ul>"}]}