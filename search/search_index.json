{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Azure Deployment Guide","text":"<p>Welcome! \ud83d\udc4b This guide should help you study for AZ-204</p>"},{"location":"#contents","title":"\ud83d\udcc4 Contents","text":"<ol> <li>Develop Azure compute solutions    Implement containerized solutions.</li> </ol>"},{"location":"#getting-started","title":"\ud83d\ude80 Getting Started","text":"<p>To follow along:</p> <ul> <li>Make sure you have an Azure account</li> <li>Install the Azure CLI</li> <li>(Optional) Clone this repo to access all files locally:</li> </ul> <pre><code>  git clone https://github.com/joeywashburn/az204.git\n  cd az204\n  mkdocs serve\n</code></pre> <p>Enjoy!</p>"},{"location":"acr/","title":"Implement containerized solutions","text":"<p>Docker Application to hit the AZ-204 Exam Topics:</p> <ul> <li>Create and manage container images for solutions</li> <li>Publish an image to Azure Container Registry</li> <li>Run containers by using Azure Container Instance</li> <li>Create solutions by using Azure Container Apps</li> </ul>"},{"location":"acr/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker </li> <li>Python Optional</li> <li>Azure Subscription (Free tier or $200 credit recommended for minimal costs)</li> <li>Existing Resource Group</li> </ul>"},{"location":"acr/#build-the-dockerfile","title":"Build the Dockerfile","text":"<ul> <li>Create a directory for your files</li> </ul> <pre><code>mkdir azurecompute25\ncd azurecompute25\n</code></pre> <ul> <li>Build your Dockerfile</li> </ul> <pre><code>FROM python:3.9-slim\nWORKDIR /app\nCOPY . .\nRUN pip install flask\nEXPOSE 5000\nCMD [\"python\", \"app.py\"]\n</code></pre>"},{"location":"acr/#create-the-flask-app","title":"Create the Flask App","text":"<ul> <li>In that same directory create a new file called app.py</li> </ul> <pre><code>from flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    return 'Hello from Docker!'\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\n</code></pre>"},{"location":"acr/#build-and-test-docker-locally","title":"Build and Test Docker locally","text":"<pre><code>docker build -t whateveryouwant:1.0 .\n</code></pre> <ul> <li>Run docker run -p 5000:5000 whateveryouwant:1.0.</li> <li>Open http://localhost:5000 in a browser (should show \"Hello from Docker!\").</li> <li>Stop the container with Ctrl+C.</li> </ul>"},{"location":"acr/#create-a-container-registry","title":"Create a Container Registry","text":"<ul> <li>Create the ACR</li> </ul> <pre><code>az acr create --resource-group az204 --name acryourname --sku Basic\n</code></pre> <ul> <li>Enable Admin</li> </ul> <pre><code>az acr update -n acryourname --admin-enabled true\n</code></pre> <ul> <li>Get you credentials</li> </ul> <pre><code>az acr credential show --name acryourname\n</code></pre>"},{"location":"acr/#push-the-image-to-acr","title":"Push the Image to ACR","text":"<ul> <li>Log in to ACR:</li> </ul> <pre><code>docker login acryourname.azurecr.io --username &lt;username&gt; --password &lt;password&gt;.\n</code></pre> <ul> <li>Tag the image:</li> </ul> <pre><code>docker tag myapp:1.0 acryourname.azurecr.io/myapp:1.0.\n</code></pre> <ul> <li>Push the image:</li> </ul> <pre><code>docker push acryourname.azurecr.io/myapp:1.0.\n</code></pre> <ul> <li>In the Azure Portal, go to your ACR, click \"Repositories,\" and verify yourapp is there.</li> </ul>"},{"location":"acr/#deploy-container-to-aci","title":"Deploy container to ACI","text":"<pre><code>az container create `\n  --resource-group az204 `\n  --name az204viacli `\n  --os-type Linux `\n  --cpu 1 `\n  --memory 1 `\n  --image acryourname.azurecr.io/myapp:1.0 `\n  --registry-login-server acryourname.azurecr.io `\n  --registry-username &lt;username&gt; `\n  --registry-password &lt;password&gt; `\n  --ports 5000 `\n  --dns-name-label az204viacli `\n  --location westus3\n  ```\n\n- Test your container\n```powershell\naz container show --resource-group az204 --name az204viacli --query ipAddress.fqdn --output tsv \n</code></pre> <ul> <li>Open http://:5000 in a browser (should show \"Hello from Docker!\"). <li>In the Azure Portal, go to your Container Instance and you will see your Container Instance</li>"},{"location":"acr/#deploy-to-container-apps-environment","title":"Deploy to Container Apps Environment","text":"<ul> <li>Create the Container Apps Environment</li> </ul> <pre><code>az containerapp env create `\n  --name az204AppEnv `\n  --resource-group az204 `\n  --location westus3\n</code></pre> <ul> <li>Deploy the app</li> </ul> <pre><code>az containerapp create `\n  --name az204containerapp `\n  --resource-group az204 `\n  --environment az204AppEnv `\n  --image acryourname.azurecr.io/myapp:1.0 `\n  --registry-server acryourname.azurecr.io `\n  --registry-username &lt;username&gt; `\n  --registry-password &lt;password&gt; `\n  --target-port 5000 `\n  --ingress external\n</code></pre> <ul> <li>In the Azure Portal, go to your Resource Group and click on your Container App.  Click the URL to make sure you see Hello from Docker!.</li> </ul>"},{"location":"acr/#clean-up","title":"Clean up","text":"<ul> <li>Optional but recommended</li> <li>Delete all you resources to not go over $200 limit</li> </ul> <pre><code>az group delete -n az204 --no-wait --yes\n</code></pre>"},{"location":"acr/#next-steps","title":"Next Steps","text":"<ul> <li>Do everything again, but this time use only the Portal</li> </ul>"},{"location":"cosmos/","title":"Develop solutions that use Azure Cosmos DB","text":"<p>Cosmos DB to hit the AZ-204 Exam Topics:</p> <ul> <li>Perform operations on containers and items by using the SDK</li> <li>Set the appropriate consistency level for operations</li> <li>Implement change feed notifications</li> </ul>"},{"location":"cosmos/#prerequisites","title":"Prerequisites","text":"<ul> <li>.NET SDK 8.0 (Install via winget: <code>winget install Microsoft.DotNet.SDK.8</code>)</li> <li>Azure CLI (Install)</li> <li>Azure Functions Core Tools (Install)</li> <li>Azure Subscription (Free tier or $200 credit recommended for minimal costs)</li> <li>Existing Resource Group</li> </ul>"},{"location":"cosmos/#set-up-cosmos-db","title":"Set Up Cosmos DB","text":"<ol> <li>In the Portal, go to \u201cAzure Cosmos DB\u201d &gt; \u201cCreate.  Choose NoSQL API\u201d</li> <li>Choose your settings.  You can refer to the sceenshot for details.  Again flip through the tabs to see what is there, but leave defaults</li> </ol>"},{"location":"cosmos/#create-database-and-container","title":"Create Database and Container","text":"<ul> <li>In the Cosmos DB account, go to \u201cData Explorer.\u201d</li> <li>New Database: TasksDB.</li> <li>New Container: Use Existing &gt; Choose TasksDB Tasks, Partition Key: /id, Throughput: 400 RU/s</li> </ul>"},{"location":"cosmos/#next-steps","title":"Next Steps","text":"<ul> <li>Do everything again, but this time use the CLI to build Cosmos.</li> <li>If you are going to take break, you could clean up here, but the next section builds on what we have done here.</li> </ul>"},{"location":"functions/","title":"Create Azure Functions for APIs","text":"<p>Functions App to hit the AZ-204 Exam Topics:</p> <ul> <li>Create and configure an Azure Functions app</li> <li>Implement input and output bindings</li> <li>Implement function triggers by using data operations, timers, and webhooks</li> </ul>"},{"location":"functions/#prerequisites","title":"Prerequisites","text":"<ul> <li>.NET SDK 8.0 (Install via winget: <code>winget install Microsoft.DotNet.SDK.8</code>)</li> <li>Azure CLI (Install)</li> <li>Azure Functions Core Tools (Install)</li> <li>Azure Subscription (Free tier or $200 credit recommended for minimal costs)</li> <li>Existing Resource Group</li> </ul>"},{"location":"functions/#setup-azure-functions-app","title":"Setup Azure Functions App","text":"<ol> <li>In the Azure Portal, create a new Function App:</li> <li>Check out the tabs for learning experience, we are leaving them default</li> </ol> <ol> <li>From your root directory build your function</li> </ol> <pre><code>func init TaskManagerFunctions --dotnet\n</code></pre> <ol> <li>Move into the TaskManagerFunctions dir</li> </ol> <pre><code>cd TaskManagerFunctions\n</code></pre> <ol> <li>Build the function</li> </ol> <pre><code>func new --template \"HttpTrigger\" --name CreateTask\n</code></pre> <ol> <li>Test your function locally first</li> </ol> <pre><code>func start\n</code></pre> <p>You should see output like</p> <pre><code>Functions:\n    CreateTask: [GET,POST] http://localhost:7071/api/CreateTask\n</code></pre> <p>Open a browser and go to:</p> <pre><code>http://localhost:7071/api/CreateTask?name=Test\n</code></pre> <p>Expected response should be something like this:</p> <pre><code>This HTTP triggered function executed successfully. Pass a name in the query string or in the request body for a personalized response.\n</code></pre> <ol> <li>Deploy to Azure: </li> </ol> <pre><code>func azure functionapp publish taskmanagerfunc-yourname #replace with your function name\n</code></pre> <p>Watch for the \u201cFunctions in taskmanagerfunc-yourname\u201d section in the output. It should list:</p> <pre><code>Functions in taskmanagerfunc-yourname:\n    CreateTask - [httpTrigger]\n        Invoke url: https://taskmanagerfunc-yourname.azurewebsites.net/api/createtask?code=...\n</code></pre> <ol> <li>Retrieve the Function Key</li> </ol> <pre><code>az functionapp function keys list --resource-group az204exam --name taskmanagerfunc-yourname --function-name CreateTask\n</code></pre> <ol> <li> <p>Save the default key value.  We are going to use it in the next step.</p> </li> <li> <p>Test it out:</p> </li> <li>Construct the URL you need to test</li> <li>Take your invoke url from Step 5 and append your default key.  It should look something like this</li> </ol> <pre><code>https://taskmanagerfunc-jwashburn.azurewebsites.net/api/createtask?code=THISISYOURCODEFROMSTEP7&amp;name=Test\n</code></pre> <ul> <li>You should see something like:</li> </ul> <pre><code>Hello, Test. This HTTP triggered function executed successfully.\n</code></pre>"},{"location":"functions/#add-blob-storage-placeholder","title":"Add Blob Storage (Placeholder)","text":"<p>Note: We\u2019ll use Blob Storage to store tasks, prepping for Cosmos DB later</p> <ol> <li>Create Storage Account:</li> <li>In the Azure Portal, create a Storage Account:<ul> <li>Name: <code>taskmanagerstore</code> (or unique, e.g., <code>taskmanagerstoreyourname</code>).</li> <li>Resource group: <code>az204exam</code>.</li> <li>Leave defaults (Standard, General-purpose v2).</li> <li>Click Create.</li> </ul> </li> <li> <p>Go to Containers &gt; Create container named <code>tasks</code>.</p> </li> <li> <p>Get Connection String:</p> </li> <li>In the Storage Account, go to Access keys.</li> <li> <p>Copy the Connection string for <code>key1</code>.</p> </li> <li> <p>Add to Function App:</p> </li> <li>In your Function App (<code>taskmanagerfunc-yourname</code>), go to Configuration &gt; Application settings.</li> <li>Click New application setting.</li> <li>Name: <code>StorageConnection</code>, Value: <code>[your-connection-string]</code>.</li> <li>Save and restart.</li> </ol>"},{"location":"functions/#implement-input-and-output-bindings","title":"Implement Input and Output Bindings","text":"<p>Note: We\u2019ll use HTTP to read task data (input) and Blob Storage to save tasks (output), matching our web app\u2019s tasks.</p> <ol> <li>Add Blob SDK:</li> <li>In <code>TaskManagerFunctions</code>, run:      <code>powershell      dotnet add package Azure.Storage.Blobs</code></li> <li>Update CreateTask Function:</li> </ol> <p>Replace CreateTask.cs with:     ```csharp     using System.IO;     using System.Threading.Tasks;     using Microsoft.AspNetCore.Mvc;     using Microsoft.Azure.Functions.Worker;     using Microsoft.AspNetCore.Http;     using Microsoft.Extensions.Logging;     using Newtonsoft.Json;</p> <pre><code>namespace TaskManagerFunctions\n{\n    public class CreateTask\n    {\n        private readonly ILogger&lt;CreateTask&gt; _logger;\n\n        public CreateTask(ILogger&lt;CreateTask&gt; logger)\n        {\n            _logger = logger;\n        }\n\n        public class TaskItem\n        {\n            public string id { get; set; } = Guid.NewGuid().ToString();\n            public string Title { get; set; }\n            public string Description { get; set; }\n            public string DueDate { get; set; }\n        }\n\n        [Function(\"CreateTask\")]\n        [BlobOutput(\"tasks/{id}.json\", Connection = \"StorageConnection\")]\n        public async Task&lt;IActionResult&gt; Run(\n            [HttpTrigger(AuthorizationLevel.Function, \"post\")] HttpRequest req)\n        {\n            _logger.LogInformation(\"Creating new task.\");\n\n            string requestBody = await new StreamReader(req.Body).ReadToEndAsync();\n            TaskItem task = JsonConvert.DeserializeObject&lt;TaskItem&gt;(requestBody);\n\n            if (string.IsNullOrEmpty(task?.Title))\n            {\n                return new BadRequestObjectResult(\"Please provide a title.\");\n            }\n\n            task.id = Guid.NewGuid().ToString();\n            _logger.LogInformation($\"Saving task: {task.Title}\");\n\n            return new OkObjectResult(task); // Saves to Blob via output binding\n        }\n    }\n}\n```\n</code></pre> <ol> <li> <p>Test Locally:</p> <p>Update local.settings.json: <code>json {     \"IsEncrypted\": false,     \"Values\": {         \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\",         \"FUNCTIONS_WORKER_RUNTIME\": \"dotnet-isolated\",         \"StorageConnection\": \"[your-connection-string]\"     } }</code> Run: <code>powershell func start</code> POST with curl or Postman: <code>powershell curl -X POST http://localhost:7071/api/CreateTask -H \"Content-Type: application/json\" -d '{\"Title\":\"Test Task\",\"Description\":\"Do this\",\"DueDate\":\"2025-04-15\"}'</code> Check the tasks container (local Azurite or Portal) for a [guid].json file with the task JSON.</p> </li> <li> <p>Deploy and Test:</p> <p>Deploy: <code>powershell func azure functionapp publish taskmanagerfunc-yourname</code> Test: <code>powershell curl -X POST https://taskmanagerfunc-yourname.azurewebsites.net/api/createtask?code=[your-key] -H \"Content-Type: application/json\" -d '{\"Title\":\"Azure Task\",\"Description\":\"Deployed\",\"DueDate\":\"2025-04-15\"}'</code></p> <p>Verify the tasks container in the Portal has a new JSON file.</p> </li> </ol> <p>Why do this? HTTP input reads task data, Blob output saves it, hitting exam goals. Preps for Cosmos DB without needing it now.</p>"},{"location":"functions/#implement-function-triggers","title":"Implement Function Triggers","text":"<p>Note: Our HTTP trigger covers webhooks. We\u2019ll add a timer trigger and Blob trigger for data operations.</p> <ol> <li> <p>Add a Timer Trigger:</p> <p>In TaskManagerFunctions, create: <code>powershell func new --template \"TimerTrigger\" --name CheckTasks</code> Edit CheckTasks.cs: ```csharp using Microsoft.Azure.Functions.Worker; using Microsoft.Extensions.Logging;</p> <p>namespace TaskManagerFunctions {     public class CheckTasks     {         private readonly ILogger _logger; <pre><code>    public CheckTasks(ILogger&lt;CheckTasks&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    [Function(\"CheckTasks\")]\n    public void Run([TimerTrigger(\"0 */5 * * * *\")] TimerInfo myTimer)\n    {\n        _logger.LogInformation($\"Timer triggered at: {DateTime.Now}\");\n        _logger.LogInformation(\"Checking tasks (placeholder for future logic)...\");\n    }\n}\n</code></pre> <p>} ``` Note: Runs every 5 minutes.</p> <p>Add a Blob Trigger:</p> <p>Create: <code>powershell func new --template \"BlobTrigger\" --name ProcessTask</code></p> <p>Edit ProcessTask.cs: ```csharp</p> <p>using Microsoft.Azure.Functions.Worker; using Microsoft.Extensions.Logging;</p> <p>namespace TaskManagerFunctions {     public class ProcessTask     {         private readonly ILogger _logger; <pre><code>    public ProcessTask(ILogger&lt;ProcessTask&gt; logger)\n    {\n        _logger = logger;\n    }\n\n    [Function(\"ProcessTask\")]\n    public void Run([BlobTrigger(\"tasks/{name}.json\", Connection = \"StorageConnection\")] string taskJson)\n    {\n        _logger.LogInformation($\"New task file detected: {taskJson}\");\n    }\n}\n</code></pre> <p>} ```</p> <p>Test Locally:</p> <p>Ensure local.settings.json has StorageConnection.</p> <p>Run: <code>powershell func start</code> For timer: Wait 5 minutes, see \u201cChecking tasks...\u201d in console.</p> <p>For Blob: Add a JSON file to tasks (via Azurite or Portal), check console for \u201cNew task file detected...\u201d.</p> <p>Deploy and Test:</p> <p><code>powershell func azure functionapp publish taskmanagerfunc-yourname</code></p> <p>Timer: Wait 5 minutes, check Portal &gt; Functions &gt; CheckTasks &gt; Monitor &gt; Logs.</p> <p>Blob: Upload a JSON to tasks container, check ProcessTask logs.</p> <p>Why do this? Timer (scheduled), Blob (data operation), and HTTP (webhook) triggers cover all exam requirements.</p>"},{"location":"functions/#next-steps","title":"Next Steps","text":"<ul> <li>Do everything again, but this time, but use the CLI where possible.</li> <li>If you are going to take break, you could clean up here, but the next section builds on what we have done here.</li> </ul>"},{"location":"webapp/","title":"Implement Azure App Service Web Apps","text":"<p>Web App to hit the AZ-204 Exam Topics:</p> <ul> <li>Create an Azure App Service Web App</li> <li>Configure and implement diagnostics and logging</li> <li>Deploy code and containerized solutions</li> <li>Configure settings including Transport Layer Security (TLS), API settings, and service connections</li> <li>Implement autoscaling</li> <li>Configure deployment slots</li> </ul>"},{"location":"webapp/#prerequisites","title":"Prerequisites","text":"<ul> <li>.NET SDK 8.0 (Install via winget: <code>winget install Microsoft.DotNet.SDK.8</code>)</li> <li>Azure CLI (Install)</li> <li>Azure Functions Core Tools (Install)</li> <li>Azure Subscription (Free tier or $200 credit recommended for minimal costs)</li> <li>Existing Resource Group</li> </ul>"},{"location":"webapp/#set-up-azure-app-service","title":"Set Up Azure App Service","text":"<ol> <li>In the Azure Portal, create a new App Service:</li> <li>Use the Free F1 tier to avoid costs.</li> <li>Note the app name (e.g., <code>taskmanagerweb-yourname</code>) and resource group (e.g., <code>az204exam</code>).</li> <li>Check out the tabs for learning experience, we are leaving them default</li> </ol> <p> 2. Create a .NET Core MVC app locally:    <code>bash    dotnet new mvc -o TaskManagerWeb    cd TaskManagerWeb    dotnet run</code> 3. Verify the app runs at http://localhost:port 4. Launch your editor of choice:    <code>bash    code.</code> 5. Browse into the Models directory under TaskManagerWeb. 6. Add TaskItem.cs:     <code>csharp         namespace TaskManagerWeb.Models         {             public class TaskItem             {                 public string id { get; set; } = System.Guid.NewGuid().ToString();                 public string? Title { get; set; }                 public string? Description { get; set; }                 public string? DueDate { get; set; } // Changed to string             }         }</code> 7. Update Controllers/HomeController.cs to handle tasks (in-memory for now):     ```csharp     using Microsoft.AspNetCore.Mvc;     using TaskManagerWeb.Models;     using System.Collections.Generic;</p> <pre><code>namespace TaskManagerWeb.Controllers\n{\n    public class HomeController : Controller\n    {\n        private static List&lt;TaskItem&gt; _tasks = new List&lt;TaskItem&gt;();\n\n        public IActionResult Index()\n        {\n            return View(_tasks);\n        }\n\n        [HttpPost]\n        public IActionResult Create(string title, string description, DateTime dueDate)\n        {\n            var task = new TaskItem\n            {\n                Title = title,\n                Description = description,\n                DueDate = dueDate.ToString(\"yyyy-MM-dd\") // Convert DateTime to string\n            };\n            _tasks.Add(task);\n            return RedirectToAction(\"Index\");\n        }\n    }\n}\n```\n</code></pre>"},{"location":"webapp/#modify-the-home-page-view-to-add-a-form","title":"Modify the Home Page View to Add a Form","text":"<p>The view (Index.cshtml) defines the UI, including the form for adding tasks and a list to display them. 1. Open Views/Home/Index.cshtml. Replace the default content with:</p> <pre><code>@model List&lt;TaskManagerWeb.Models.TaskItem&gt;\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;Task Manager&lt;/title&gt;\n    &lt;style&gt;\n        &lt;text&gt;\n        body {\n            font-family: 'Segoe UI', Arial, sans-serif;\n            background-color: #f4f6f9;\n            color: #333;\n            margin: 0;\n            padding: 20px;\n            line-height: 1.6;\n        }\n\n        h1 {\n            color: #2c3e50;\n            text-align: center;\n            margin-bottom: 20px;\n        }\n\n        h2 {\n            color: #34495e;\n            margin-top: 30px;\n            border-bottom: 2px solid #3498db;\n            padding-bottom: 5px;\n        }\n\n        form {\n            background: #fff;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n            max-width: 500px;\n            margin: 0 auto;\n        }\n\n        div {\n            margin-bottom: 15px;\n        }\n\n        label {\n            display: block;\n            font-weight: 600;\n            margin-bottom: 5px;\n            color: #2c3e50;\n        }\n\n        input[type=\"text\"],\n        textarea,\n        input[type=\"date\"] {\n            width: 100%;\n            padding: 10px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            font-size: 14px;\n            box-sizing: border-box;\n        }\n\n        textarea {\n            resize: vertical;\n            min-height: 100px;\n        }\n\n        input:focus,\n        textarea:focus {\n            outline: none;\n            border-color: #3498db;\n            box-shadow: 0 0 5px rgba(52, 152, 219, 0.3);\n        }\n\n        button {\n            background-color: #3498db;\n            color: #fff;\n            padding: 10px 20px;\n            border: none;\n            border-radius: 4px;\n            font-size: 16px;\n            cursor: pointer;\n            transition: background-color 0.3s;\n        }\n\n        button:hover {\n            background-color: #2980b9;\n        }\n\n        ul {\n            list-style: none;\n            padding: 0;\n            max-width: 600px;\n            margin: 20px auto;\n        }\n\n        li {\n            background: #fff;\n            padding: 15px;\n            margin-bottom: 10px;\n            border-radius: 6px;\n            box-shadow: 0 1px 5px rgba(0, 0, 0, 0.1);\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n\n        li.no-tasks {\n            color: #7f8c8d;\n            font-style: italic;\n            text-align: center;\n            box-shadow: none;\n        }\n\n        .task-info {\n            flex-grow: 1;\n        }\n\n        .task-info strong {\n            color: #2c3e50;\n        }\n\n        @@media (max-width: 600px) {\n            form, ul {\n                padding: 10px;\n            }\n\n            li {\n                flex-direction: column;\n                align-items: flex-start;\n            }\n        }\n        &lt;/text&gt;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Task Manager&lt;/h1&gt;\n\n    &lt;form asp-action=\"Create\" method=\"post\"&gt;\n        &lt;div&gt;\n            &lt;label&gt;Title:&lt;/label&gt;\n            &lt;input type=\"text\" name=\"title\" required /&gt;\n        &lt;/div&gt;\n        &lt;div&gt;\n            &lt;label&gt;Description:&lt;/label&gt;\n            &lt;textarea name=\"description\"&gt;&lt;/textarea&gt;\n        &lt;/div&gt;\n        &lt;div&gt;\n            &lt;label&gt;Due Date:&lt;/label&gt;\n            &lt;input type=\"date\" name=\"dueDate\" required /&gt;\n        &lt;/div&gt;\n        &lt;button type=\"submit\"&gt;Add Task&lt;/button&gt;\n    &lt;/form&gt;\n\n    &lt;h2&gt;Tasks&lt;/h2&gt;\n    &lt;ul&gt;\n        @if (Model != null &amp;&amp; Model.Any())\n        {\n            foreach (var task in Model)\n            {\n                &lt;li&gt;\n                    &lt;div class=\"task-info\"&gt;\n                        &lt;strong&gt;@task.Title&lt;/strong&gt; - @task.Description\n                        &lt;br /&gt;\n                        &lt;small&gt;Due: @(task.DueDate ?? \"No due date\")&lt;/small&gt;\n                    &lt;/div&gt;\n                &lt;/li&gt;\n            }\n        }\n        else\n        {\n            &lt;li class=\"no-tasks\"&gt;No tasks yet.&lt;/li&gt;\n        }\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ol> <li>Test the app works locally</li> </ol> <pre><code>dotnet run\n</code></pre>"},{"location":"webapp/#deploy-to-azure-app-service","title":"Deploy to Azure App Service","text":"<ol> <li>Push the app you created up to the Azure App Service we previously made.</li> </ol> <pre><code>az webapp up --name taskmanagerweb-yourname --resource-group az204exam --sku F1 --location yourlocation --runtime \"dotnet:8\"\n</code></pre> <ol> <li>Test the app in your browser.  You should be able to get the URL from the App Service Overview page</li> </ol>"},{"location":"webapp/#configure-settings-tls-api-settings-service-connections","title":"Configure Settings (TLS, API Settings, Service Connections)","text":"<ol> <li>Enable TLS:</li> <li>In the Azure Portal, go to your App Service (<code>taskmanagerweb-yourname</code>).</li> <li>Click TLS/SSL settings.</li> <li>Turn HTTPS Only to On &gt; Save.</li> <li> <p>Test: Visit <code>http://taskmanagerweb-yourname.azurewebsites.net</code> (it should redirect to HTTPS).</p> </li> <li> <p>Add App Settings:</p> </li> <li>Go to Configuration &gt; Application settings.</li> <li>Click New application setting.</li> <li>Name: <code>CosmosDBConnection</code>, Value: <code>placeholder</code> (we\u2019ll use this later for Cosmos DB).</li> <li> <p>Click OK &gt; Save &gt; Continue to restart the app.</p> </li> <li> <p>Set Up Managed Identity:</p> </li> <li>Go to Identity &gt; System assigned.</li> <li>Turn Status to On &gt; Save.</li> <li> <p>Note: This lets the app securely connect to other Azure services (like Cosmos DB) without passwords later.</p> </li> <li> <p>Verify:</p> </li> <li>Open <code>https://taskmanagerweb-yourname.azurewebsites.net</code> and confirm it works.</li> <li>Check Configuration in the Portal to see <code>CosmosDBConnection</code>.</li> <li>No code changes needed, but the app is ready for future connections.</li> </ol>"},{"location":"webapp/#implement-autoscaling","title":"Implement Autoscaling","text":"<p>Note: Autoscaling requires a Standard (S1) or higher tier.  You will have to chase this thread on your own</p>"},{"location":"webapp/#configure-deployment-slots","title":"Configure Deployment Slots","text":"<p>Note: Deployment slots need a Standard (S1) or higher tier, not Free F1. You will have to chase this thread on your own</p>"},{"location":"webapp/#next-steps","title":"Next Steps","text":"<ul> <li>Do everything again, but this time use the CLI to build the Web App.</li> <li>If you are going to take break, you could clean up here, but the next section builds on what we have done here.</li> </ul>"}]}