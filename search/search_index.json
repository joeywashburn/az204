{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Azure Deployment Guide","text":"<p>Welcome! \ud83d\udc4b This guide is designed to help you prepare for the AZ-204: Developing Solutions for Microsoft Azure exam. It covers key concepts, practical steps, and resources to master the skills needed to pass the exam.</p>"},{"location":"#exam-overview","title":"\ud83d\udcda Exam Overview","text":"<p>The AZ-204 exam tests your ability to develop solutions for Microsoft Azure. Below is a breakdown of the skills measured:</p> <ul> <li>Develop Azure compute solutions (25\u201330%)</li> <li>Develop for Azure storage (15\u201320%)</li> <li>Implement Azure security (15\u201320%)</li> <li>Monitor, troubleshoot, and optimize Azure solutions (5\u201310%)</li> <li>Connect to and consume Azure services and third-party services (20\u201325%)</li> </ul> <p>Explore the detailed topics below to dive into each area.</p>"},{"location":"#exam-topics","title":"\ud83d\udcc4 Exam Topics","text":""},{"location":"#1-develop-azure-compute-solutions-2530","title":"1. Develop Azure Compute Solutions (25\u201330%)","text":"<p>Learn to build and deploy compute resources in Azure, including containerized solutions, web apps, and serverless functions.</p> <ul> <li>Implement Containerized Solutions </li> <li>Create and manage container images for solutions  </li> <li>Publish images to Azure Container Registry  </li> <li>Run containers using Azure Container Instance  </li> <li> <p>Create solutions with Azure Container Apps Learn more</p> </li> <li> <p>Implement Azure App Service Web Apps </p> </li> <li>Create an Azure App Service Web App  </li> <li>Configure diagnostics, logging, and TLS settings  </li> <li>Deploy code and containerized solutions  </li> <li> <p>Implement autoscaling and deployment slots  </p> </li> <li> <p>Implement Azure Functions </p> </li> <li>Create and configure Azure Functions apps  </li> <li>Use input/output bindings and triggers (data operations, timers, webhooks)  </li> </ul>"},{"location":"#2-develop-for-azure-storage-1520","title":"2. Develop for Azure Storage (15\u201320%)","text":"<p>Master storage solutions like Cosmos DB and Blob Storage for scalable data management.</p> <ul> <li>Azure Cosmos DB </li> <li>Perform operations on containers and items using the SDK  </li> <li>Set appropriate consistency levels  </li> <li> <p>Implement change feed notifications  </p> </li> <li> <p>Azure Blob Storage </p> </li> <li>Set and retrieve properties/metadata  </li> <li>Perform data operations with the SDK  </li> <li>Implement storage policies and data lifecycle management  </li> </ul>"},{"location":"#3-implement-azure-security-1520","title":"3. Implement Azure Security (15\u201320%)","text":"<p>Secure Azure solutions with authentication, authorization, and encryption.</p> <ul> <li>User Authentication and Authorization </li> <li>Use Microsoft Identity platform and Microsoft Entra ID  </li> <li>Create shared access signatures  </li> <li> <p>Interact with Microsoft Graph  </p> </li> <li> <p>Secure Azure Solutions </p> </li> <li>Use App Configuration or Azure Key Vault for secure app data  </li> <li>Develop code using keys, secrets, and certificates in Key Vault  </li> <li>Implement Managed Identities  </li> </ul>"},{"location":"#4-monitor-troubleshoot-and-optimize-azure-solutions-510","title":"4. Monitor, Troubleshoot, and Optimize Azure Solutions (5\u201310%)","text":"<p>Monitor and improve Azure solutions with Application Insights.</p> <ul> <li>Application Insights </li> <li>Monitor metrics, logs, and traces  </li> <li>Implement web tests and alerts  </li> <li>Instrument apps/services for telemetry  </li> </ul>"},{"location":"#5-connect-to-and-consume-azure-and-third-party-services-2025","title":"5. Connect to and Consume Azure and Third-Party Services (20\u201325%)","text":"<p>Integrate Azure solutions with APIs, events, and external services.</p> <ul> <li>API Management </li> <li>Create and document APIs in Azure API Management  </li> <li> <p>Configure access and implement policies  </p> </li> <li> <p>Event-Based Solutions </p> </li> <li>Use Azure Event Grid and Event Hub for event-driven architectures  </li> </ul>"},{"location":"#getting-started","title":"\ud83d\ude80 Getting Started","text":"<p>To follow this guide:</p> <ol> <li> <p>Use your WGU Azure account Azure Portal.</p> </li> <li> <p>Install Azure CLI    Follow the installation guide.</p> </li> </ol>"},{"location":"#tips-for-success","title":"\ud83d\udca1 Tips for Success","text":"<ul> <li>Focus on hands-on practice with Azure services using the Azure Free Tier.  </li> <li>Review the official AZ-204 study guide for detailed objectives.  </li> </ul> <p>Happy studying, and good luck on your AZ-204 exam! \ud83c\udf89</p>"},{"location":"acr/","title":"Implement Containerized Solutions","text":"<p>This guide covers the AZ-204 exam topics for implementing containerized solutions using Docker and Azure services:</p> <ul> <li>Create and manage container images for solutions</li> <li>Publish an image to Azure Container Registry</li> <li>Run containers by using Azure Container Instance</li> <li>Create solutions by using Azure Container Apps</li> </ul>"},{"location":"acr/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker</li> <li>Python (Optional)</li> <li>Azure Subscription (Free tier or $200 credit recommended for minimal costs)</li> <li>Existing Resource Group (<code>az204</code>)</li> </ul>"},{"location":"acr/#build-the-dockerfile","title":"Build the Dockerfile","text":"<p>Follow these steps to create the Dockerfile:</p> <ol> <li> <p>Create a directory for your files, then create a <code>Dockerfile</code> with the content below.</p> </li> <li> <p>After setting up the directory, create the <code>Dockerfile</code>.</p> </li> </ol> <p>Step 1: Create the directory</p> <pre><code>mkdir azurecompute25\ncd azurecompute25\n</code></pre> <p>Step 2: Create the <code>Dockerfile</code></p> <pre><code>FROM python:3.9-slim\nWORKDIR /app\nCOPY . .\nRUN pip install flask\nEXPOSE 5000\nCMD [\"python\", \"app.py\"]\n</code></pre>"},{"location":"acr/#create-the-flask-app","title":"Create the Flask App","text":"<p>In the same directory, create a file named <code>app.py</code> with the following content:</p> <pre><code>from flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    return 'Hello from Docker!'\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\n</code></pre>"},{"location":"acr/#build-and-test-docker-locally","title":"Build and Test Docker Locally","text":"<p>Follow these steps to build and test the Docker image locally:</p> <ol> <li> <p>Build the Docker image using the command below.</p> </li> <li> <p>Run the container to test it.</p> </li> <li> <p>Open <code>http://localhost:5000</code> in a browser (should display \"Hello from Docker!\").</p> </li> <li> <p>Stop the container with <code>Ctrl+C</code>.</p> </li> </ol> <p>Step 1: Build the Docker image</p> <pre><code>docker build -t whateveryouwant:1.0 .\n</code></pre> <p>Step 2: Run the container</p> <pre><code>docker run -p 5000:5000 whateveryouwant:1.0\n</code></pre>"},{"location":"acr/#create-a-container-registry","title":"Create a Container Registry","text":"<p>Follow these steps to create an Azure Container Registry (ACR):</p> <ol> <li> <p>Create the ACR using the command below.</p> </li> <li> <p>Enable admin access for the ACR.</p> </li> <li> <p>Retrieve the credentials for the ACR.</p> </li> </ol> <p>Step 1: Create the ACR</p> <pre><code>az acr create --resource-group az204 --name acryourname --sku Basic\n</code></pre> <p>Step 2: Enable admin access</p> <pre><code>az acr update -n acryourname --admin-enabled true\n</code></pre> <p>Step 3: Retrieve credentials</p> <pre><code>az acr credential show --name acryourname\n</code></pre>"},{"location":"acr/#push-the-image-to-acr","title":"Push the Image to ACR","text":"<p>Follow these steps to push the Docker image to ACR:</p> <ol> <li> <p>Log in to ACR using the command below.</p> </li> <li> <p>Tag the image for ACR.</p> </li> <li> <p>Push the image to ACR.</p> </li> <li> <p>In the Azure Portal, go to your ACR, click Repositories, and verify <code>myapp</code> is listed.</p> </li> </ol> <p>Step 1: Log in to ACR</p> <pre><code>docker login acryourname.azurecr.io --username &lt;username&gt; --password &lt;password&gt;\n</code></pre> <p>Step 2: Tag the image</p> <pre><code>docker tag whateveryouwant:1.0 acryourname.azurecr.io/myapp:1.0\n</code></pre> <p>Step 3: Push the image</p> <pre><code>docker push acryourname.azurecr.io/myapp:1.0\n</code></pre>"},{"location":"acr/#deploy-container-to-azure-container-instance-aci","title":"Deploy Container to Azure Container Instance (ACI)","text":"<p>Follow these steps to deploy the container to Azure Container Instance (ACI):</p> <ol> <li> <p>Deploy the container using the command below.</p> </li> <li> <p>Test the container by retrieving its FQDN.</p> </li> <li> <p>Open <code>http://&lt;fqdn&gt;:5000</code> in a browser (should display \"Hello from Docker!\").</p> </li> <li> <p>In the Azure Portal, navigate to your Container Instance to verify it\u2019s running.</p> </li> </ol> <p>Step 1: Deploy the container</p> <pre><code>az container create --resource-group az204 --name az204viacli --os-type Linux --cpu 1 --memory 1 --image acryourname.azurecr.io/myapp:1.0 --registry-login-server acryourname.azurecr.io --registry-username &lt;username&gt; --registry-password &lt;password&gt; --ports 5000 --dns-name-label az204viacli --location westus3\n</code></pre> <p>Step 2: Test the container</p> <pre><code>az container show --resource-group az204 --name az204viacli --query ipAddress.fqdn --output tsv\n</code></pre>"},{"location":"acr/#deploy-to-container-apps-environment","title":"Deploy to Container Apps Environment","text":"<p>Follow these steps to deploy the container to Azure Container Apps:</p> <ol> <li> <p>Create a Container Apps Environment using the command below.</p> </li> <li> <p>Deploy the app to the Container Apps Environment.</p> </li> <li> <p>In the Azure Portal, go to your Resource Group, click on your Container App, and click the URL to verify it displays \"Hello from Docker!\".</p> </li> </ol> <p>Step 1: Create a Container Apps Environment</p> <pre><code>az containerapp env create --name az204AppEnv --resource-group az204 --location westus3\n</code></pre> <p>Step 2: Deploy the app</p> <pre><code>az containerapp create --name az204containerapp --resource-group az204 --environment az204AppEnv --image acryourname.azurecr.io/myapp:1.0 --registry-server acryourname.azurecr.io --registry-username &lt;username&gt; --registry-password &lt;password&gt; --target-port 5000 --ingress external\n</code></pre>"},{"location":"acr/#clean-up-optional","title":"Clean Up (Optional)","text":"<p>To avoid exceeding the $200 credit limit, delete all resources:</p> <pre><code>az group delete -n az204 --no-wait --yes\n</code></pre>"},{"location":"acr/#next-steps","title":"Next Steps","text":"<ul> <li>Repeat the process using only the Azure Portal.</li> </ul>"},{"location":"api/","title":"Connect to and Consume Azure Services and Third-Party Services with API Management","text":"<p>This guide covers the AZ-204 exam topics for connecting to and consuming Azure services and third-party services using Azure API Management (APIM). We'll integrate our existing <code>TaskManagerWeb</code> (WebApp) and <code>TaskManagerFunctions</code> (Function App) with APIM to manage and secure their APIs. The focus is on creating an APIM instance, creating and documenting APIs, configuring access, and implementing policies.</p>"},{"location":"api/#prerequisites","title":"Prerequisites","text":"<ul> <li>Azure Subscription (Free tier or $200 credit recommended).</li> <li>Existing Resource Group (<code>az204exam</code>).</li> <li>Deployed Apps:</li> <li>WebApp: <code>taskmanagerweb-yourname</code> (ASP.NET Core MVC, Free F1 tier).</li> <li>Function App: <code>taskmanagerfunc-yourname</code> (.NET 8 isolated, Consumption plan).</li> <li>Tools:</li> <li>.NET SDK 8.0: <code>winget install Microsoft.DotNet.SDK.8</code>.</li> <li>Azure CLI.</li> <li>Azure Functions Core Tools.</li> </ul>"},{"location":"api/#create-an-azure-api-management-instance","title":"Create an Azure API Management Instance","text":"<p>We'll set up an APIM instance to manage APIs for our Function App's <code>ManageTask</code> endpoint and WebApp's task operations.</p>"},{"location":"api/#steps","title":"Steps","text":"<ol> <li>Create an APIM instance as shown in the screenshot below.</li> </ol> <p>Step 1: Create APIM Instance</p> <p></p>"},{"location":"api/#create-and-document-apis","title":"Create and Document APIs","text":"<p>We'll import the Function App's <code>ManageTask</code> endpoint as an API, manually define a WebApp API, and then document both.</p>"},{"location":"api/#steps_1","title":"Steps","text":""},{"location":"api/#import-function-app-api","title":"Import Function App API","text":"<p>Follow these steps to import the Function App API:</p> <ol> <li> <p>In the Portal, go to <code>taskmanagerapim-yourname</code> &gt; APIs &gt; Add API &gt; Select Function App.</p> </li> <li> <p>Configure the settings as follows:</p> </li> <li>Function App: <code>taskmanagerfunc-yourname</code>.</li> <li>Select functions: Check <code>ManageTask</code>.</li> <li>Display name: <code>TaskManagerFunctionsAPI</code>.</li> <li>API URL suffix: <code>functions</code>.</li> </ol>"},{"location":"api/#create-webapp-api-manually","title":"Create WebApp API Manually","text":"<p>Follow these steps to create the WebApp API manually:</p> <ol> <li> <p>In APIs, select OpenAPI &gt; Manual definition.</p> </li> <li> <p>Configure the settings as follows:</p> </li> <li>Display name: <code>TaskManagerWebAPI</code>.</li> <li>API URL suffix: <code>web</code>.</li> <li> <p>Base URL: <code>https://taskmanagerweb-yourname.azurewebsites.net</code>.</p> </li> <li> <p>Add the following operations:</p> </li> <li>GET /api/tasks:<ul> <li>Display name: <code>Get Tasks</code>.</li> <li>URL: <code>GET /api/tasks</code>.</li> <li>Description: <code>Retrieves the list of tasks</code>.</li> </ul> </li> <li>POST /api/tasks:<ul> <li>Display name: <code>Create Task</code>.</li> <li>URL: <code>POST /api/tasks</code>.</li> <li>Description: <code>Creates a new task</code>.</li> </ul> </li> </ol>"},{"location":"api/#document-apis","title":"Document APIs","text":"<p>Follow these steps to document the APIs:</p> <ol> <li> <p>Document the <code>TaskManagerFunctionsAPI</code> with its description and request body example.</p> </li> <li> <p>Document the <code>TaskManagerWebAPI</code> with its description and request body.</p> </li> <li> <p>Save all changes.</p> </li> </ol> <p>Step 1: Document <code>TaskManagerFunctionsAPI</code></p> <ul> <li>Go to APIs &gt; <code>TaskManagerFunctionsAPI</code> &gt; Settings &gt; Description.</li> <li>Add: <code>API for managing tasks stored in Cosmos DB via Azure Functions</code>.</li> <li>For the <code>ManageTask</code> operation:</li> <li>Select POST /api/managetask &gt; Frontend &gt; Add description: <code>Creates a task with title, description, and due date</code>.</li> <li>Add request body example:</li> </ul> <pre><code>{\n  \"Title\": \"Sample Task\",\n  \"Description\": \"Test task\",\n  \"DueDate\": \"2025-04-15\"\n}\n</code></pre> <p>Step 2: Document <code>TaskManagerWebAPI</code></p> <ul> <li>Go to Settings &gt; Description: <code>API for task management operations from the WebApp</code>.</li> <li>For <code>GET /api/tasks</code>: Description: <code>Returns all tasks</code>.</li> <li>For <code>POST /api/tasks</code>: Description: <code>Adds a new task</code>. Request body:</li> </ul> <pre><code>{\n  \"title\": \"New Task\",\n  \"description\": \"Details\",\n  \"dueDate\": \"2025-04-15\"\n}\n</code></pre>"},{"location":"api/#test-apis","title":"Test APIs","text":"<p>Follow these steps to test the APIs:</p> <ol> <li> <p>Go to the Test tab in each API.</p> </li> <li> <p>Test the <code>TaskManagerFunctionsAPI</code>.</p> </li> <li> <p>Test the <code>TaskManagerWebAPI</code>.</p> </li> <li> <p>Check the Developer Portal (under Overview &gt; Developer portal) to see API docs.</p> </li> </ol> <p>Step 2: Test <code>TaskManagerFunctionsAPI</code></p> <ul> <li>Select <code>POST /functions/managetask</code>, add the body from the example above, and send.</li> <li>Verify HTTP 200 and task data in response.</li> </ul> <p>Step 3: Test <code>TaskManagerWebAPI</code></p> <ul> <li>Test <code>POST /web/api/tasks</code> with the body from the example above.</li> <li>Note: If the WebApp lacks <code>/api/tasks</code>, we'll update it later (see Next Steps).</li> </ul>"},{"location":"api/#why","title":"Why","text":"<p>Creating APIs exposes our app functionality, and documentation ensures usability, both critical for the exam.</p>"},{"location":"api/#configure-access-to-apis","title":"Configure Access to APIs","text":"<p>We'll secure API access using subscription keys and Microsoft Entra ID authentication.</p>"},{"location":"api/#steps_2","title":"Steps","text":"<p>Follow these steps to configure access to the APIs:</p> <ol> <li> <p>Enable subscription keys and generate a key.</p> </li> <li> <p>Test the API with the subscription key.</p> </li> <li> <p>Configure Entra ID authentication.</p> </li> <li> <p>Test Entra ID access through the Developer Portal.</p> </li> <li> <p>Verify the access controls.</p> </li> </ol> <p>Step 1: Enable Subscription Keys</p> <ul> <li>In <code>taskmanagerapim-yourname</code> &gt; Subscriptions &gt; Ensure Require subscription is enabled for both APIs.</li> <li>Generate a key:</li> <li>Select Add subscription.</li> <li>Name: <code>TaskManagerClient</code>.</li> <li>Scope: All APIs.</li> <li>Save and copy the Primary key.</li> </ul> <p>Step 2: Test with Subscription Key</p> <p>Use curl or Postman with the following command:</p> <pre><code>curl -X POST https://taskmanagerapim-yourname.azure-api.net/functions/managetask -H \"Ocp-Apim-Subscription-Key: [your-key]\" -H \"Content-Type: application/json\" -d '{\"Title\":\"APIM Task\",\"Description\":\"Test\",\"DueDate\":\"2025-04-15\"}'\n</code></pre> <ul> <li>Verify HTTP 200 and task creation (check Cosmos DB in Portal &gt; Data Explorer &gt; <code>TasksDB/Tasks</code>).</li> </ul> <p>Step 3: Configure Entra ID Authentication</p> <ul> <li>In Microsoft Entra ID (from <code>auth.md</code>), use the existing <code>TaskManagerWebApp</code> app registration.</li> <li>Update redirect URI:</li> <li>Add <code>https://taskmanagerapim-yourname.portal.azure-api.net/signin-aad</code> (for Developer Portal).</li> <li>In APIM &gt; APIs &gt; <code>TaskManagerFunctionsAPI</code> &gt; Settings:</li> <li>Authentication: Add OAuth 2.0.</li> <li>Configure:<ul> <li>Authorization server: New server.</li> <li>Name: <code>EntraID</code>.</li> <li>Client ID: From <code>TaskManagerWebApp</code> app registration.</li> <li>Client secret: Create and copy one from Certificates &amp; secrets.</li> <li>Authorization URL: <code>https://login.microsoftonline.com/[your-tenant-id]/oauth2/v2.0/authorize</code>.</li> <li>Token URL: <code>https://login.microsoftonline.com/[your-tenant-id]/oauth2/v2.0/token</code>.</li> <li>Default scope: <code>api://[your-client-id]/user_impersonation</code>.</li> </ul> </li> <li>Save.</li> <li>Apply to <code>POST /managetask</code> operation.</li> </ul> <p>Step 4: Test Entra ID Access</p> <ul> <li>In Developer Portal, sign in with an Entra ID account.</li> <li>Test <code>POST /functions/managetask</code> using the portal's Try it feature.</li> <li>Verify task creation in Cosmos DB.</li> </ul> <p>Step 5: Verify</p> <ul> <li>Without a subscription key, requests to APIs return HTTP 401.</li> <li>Entra ID-authenticated requests succeed in the Developer Portal.</li> </ul>"},{"location":"api/#why_1","title":"Why","text":"<p>Configuring access with keys and Entra ID ensures secure API consumption, a core AZ-204 topic.</p>"},{"location":"api/#implement-policies-for-apis","title":"Implement Policies for APIs","text":"<p>We'll add policies to rate-limit the Function App API and rewrite URLs for the WebApp API.</p>"},{"location":"api/#steps_3","title":"Steps","text":"<p>Follow these steps to implement policies for the APIs:</p> <ol> <li> <p>Add a rate-limit policy to the Function App API and test it.</p> </li> <li> <p>Add a URL rewrite policy for the WebApp API and test it.</p> </li> <li> <p>Verify the policies.</p> </li> </ol> <p>Step 1: Rate-Limit Function App API</p> <ul> <li>In <code>taskmanagerapim-yourname</code> &gt; APIs &gt; <code>TaskManagerFunctionsAPI</code> &gt; All operations.</li> <li>Select Design &gt; + Add policy.</li> <li>Add Inbound processing policy:</li> </ul> <pre><code>&lt;rate-limit calls=\"5\" renewal-period=\"60\" /&gt;\n</code></pre> <ul> <li>Save.</li> <li>Test with the following command:</li> </ul> <pre><code>for i in {1..6}; do curl -X POST https://taskmanagerapim-yourname.azure-api.net/functions/managetask -H \"Ocp-Apim-Subscription-Key: [your-key]\" -H \"Content-Type: application/json\" -d '{\"Title\":\"Test'$i'\",\"Description\":\"Rate limit\",\"DueDate\":\"2025-04-15\"}'; done\n</code></pre> <ul> <li>Expect HTTP 429 (Too Many Requests) after 5 calls in 60 seconds.</li> </ul> <p>Step 2: Rewrite URL for WebApp API</p> <ul> <li>In <code>TaskManagerWebAPI</code> &gt; All operations.</li> <li>Add policy:</li> </ul> <pre><code>&lt;rewrite-uri template=\"/api/tasks\" /&gt;\n</code></pre> <ul> <li>Save.</li> <li>Note: This assumes the WebApp will support <code>/api/tasks</code>. If not implemented, we'll add it (see Next Steps).</li> <li>Test with the following command:</li> </ul> <pre><code>curl -X POST https://taskmanagerapim-yourname.azure-api.net/web/api/tasks -H \"Ocp-Apim-Subscription-Key: [your-key]\" -H \"Content-Type: application/json\" -d '{\"title\":\"Web Task\",\"description\":\"Test\",\"dueDate\":\"2025-04-15\"}'\n</code></pre> <ul> <li>Verify the request routes correctly (may fail if <code>/api/tasks</code> isn't coded yet).</li> </ul> <p>Step 3: Verify</p> <ul> <li>Check Trace in APIM's Test tab to confirm policies applied (rate-limit errors, URL rewrites).</li> <li>For the Function App, confirm only 5 tasks were created in Cosmos DB after the test.</li> </ul>"},{"location":"api/#why_2","title":"Why","text":"<p>Policies like rate-limiting and URL rewriting demonstrate control over API behavior, a key exam skill.</p>"},{"location":"api/#verify-all-topics","title":"Verify All Topics","text":"<ul> <li>APIM Instance: Created <code>taskmanagerapim-yourname</code> in Consumption tier.</li> <li>Create/Document APIs: Imported <code>ManageTask</code> and defined <code>TaskManagerWebAPI</code> with descriptions and examples.</li> <li>Configure Access: Secured with subscription keys and Entra ID.</li> <li>Policies: Added rate-limiting and URL rewriting.</li> </ul>"},{"location":"api/#clean-up-optional","title":"Clean Up (Optional)","text":"<p>To avoid costs, delete all resources:</p> <pre><code>az group delete -n az204exam --no-wait --yes\n</code></pre>"},{"location":"api/#next-steps","title":"Next Steps","text":"<ul> <li>Update <code>TaskManagerWeb</code> to support <code>/api/tasks</code> for full WebApp API functionality:</li> <li>Add a new controller (<code>Controllers/TasksController.cs</code>):</li> </ul> <pre><code>using Microsoft.AspNetCore.Mvc;\nusing TaskManagerWeb.Models;\nusing System.Collections.Generic;\n\nnamespace TaskManagerWeb.Controllers\n{\n    [Route(\"api/tasks\")]\n    [ApiController]\n    public class TasksController : ControllerBase\n    {\n        private static List&lt;TaskItem&gt; _tasks = new List&lt;TaskItem&gt;();\n\n        [HttpGet]\n        public IActionResult GetTasks()\n        {\n            return Ok(_tasks);\n        }\n\n        [HttpPost]\n        public IActionResult CreateTask([FromBody] TaskItem task)\n        {\n            if (string.IsNullOrEmpty(task.Title))\n            {\n                return BadRequest(\"Title is required.\");\n            }\n            task.id = System.Guid.NewGuid().ToString();\n            _tasks.Add(task);\n            return Ok(task);\n        }\n    }\n}\n</code></pre> <ul> <li>Deploy:</li> </ul> <pre><code>az webapp up --name taskmanagerweb-yourname --resource-group az204exam\n</code></pre> <ul> <li>Test all APIs again via APIM.</li> <li>Explore third-party service integration (e.g., Microsoft Graph) for remaining exam coverage.</li> </ul>"},{"location":"appinsights/","title":"Monitor, Troubleshoot, and Optimize Azure Solutions with Application Insights","text":"<p>This guide covers the AZ-204 exam topics for monitoring, troubleshooting, and optimizing Azure solutions using Application Insights, building on our existing <code>TaskManagerWeb</code> (WebApp) and <code>TaskManagerFunctions</code> (Function App). Both apps have Application Insights enabled from their Azure Portal deployment. We'll use these to monitor metrics/logs/traces, implement web tests/alerts, and instrument custom telemetry.</p>"},{"location":"appinsights/#prerequisites","title":"Prerequisites","text":"<ul> <li>Azure Subscription (Free tier or $200 credit recommended).</li> <li>Existing Resource Group (<code>az204exam</code>).</li> <li>Deployed Apps:</li> <li>WebApp: <code>taskmanagerweb-yourname</code> (ASP.NET Core MVC, Free F1 tier).</li> <li>Function App: <code>taskmanagerfunc-yourname</code> (.NET 8 isolated, Consumption plan).</li> <li>Tools:</li> <li>.NET SDK 8.0: <code>winget install Microsoft.DotNet.SDK.8</code>.</li> <li>Azure CLI.</li> <li>Azure Functions Core Tools.</li> </ul>"},{"location":"appinsights/#monitor-and-analyze-metrics-logs-and-traces","title":"Monitor and Analyze Metrics, Logs, and Traces","text":"<p>Application Insights is already enabled for both apps, capturing default telemetry (requests, exceptions). We'll analyze this data in the Azure Portal.</p>"},{"location":"appinsights/#steps","title":"Steps","text":"<p>Follow these steps to monitor and analyze metrics, logs, and traces:</p> <ol> <li> <p>Access Application Insights for both apps.</p> </li> <li> <p>Check metrics for the WebApp and Function App.</p> </li> <li> <p>Query logs to analyze app behavior.</p> </li> <li> <p>Verify traces for detailed event tracking.</p> </li> </ol> <p>Step 1: Access Application Insights</p> <ul> <li>In the Azure Portal, go to the resource group <code>az204exam</code>.</li> <li>Select Application Insights for <code>taskmanagerweb-yourname</code> (WebApp) and <code>taskmanagerfunc-yourname</code> (Function App). If not visible, find them under each app\u2019s Application Insights settings.</li> </ul> <p>Step 2: Check Metrics</p> <p>For the WebApp:</p> <ul> <li>Go to Metrics &gt; Select <code>Server requests</code> &gt; Filter by <code>cloud_RoleName == \"taskmanagerweb-yourname\"</code>.</li> <li>Verify request counts, response times, and failure rates for <code>GET /</code>.</li> </ul> <p>For the Function App:</p> <ul> <li>Select <code>Function Execution Count</code> &gt; Filter by <code>cloud_RoleName == \"taskmanagerfunc-yourname\"</code>.</li> <li>Check executions for <code>CreateTask</code> or <code>ManageTask</code> (e.g., <code>POST /api/managetask</code>).</li> </ul> <p>Step 3: Query Logs</p> <p>In Application Insights, go to Logs and run the following queries:</p> <ul> <li>WebApp: <code>requests | where cloud_RoleName == \"taskmanagerweb-yourname\" | summarize count() by timestamp</code> (shows request trends).</li> <li>Function App: <code>traces | where cloud_RoleName == \"taskmanagerfunc-yourname\" and message contains \"Creating new task\"</code> (logs from <code>CreateTask</code>).</li> </ul> <p>Save queries for reuse.</p> <p>Step 4: Verify Traces</p> <p>For the WebApp:</p> <ul> <li>In Logs, run <code>traces | where cloud_RoleName == \"taskmanagerweb-yourname\"</code> to see request traces (e.g., page loads, form submissions).</li> </ul> <p>For the Function App:</p> <ul> <li>Check <code>traces | where message contains \"Processing task in Cosmos DB\"</code> (from <code>ManageTask</code>).</li> </ul> <p>Confirm traces show up in Transaction search for specific actions (e.g., POST requests).</p>"},{"location":"appinsights/#why","title":"Why","text":"<p>Analyzing metrics (requests, performance), logs (app behavior), and traces (detailed events) ensures we understand app health, a core AZ-204 skill.</p>"},{"location":"appinsights/#implement-application-insights-web-tests-and-alerts","title":"Implement Application Insights Web Tests and Alerts","text":"<p>We'll set up a web test for the WebApp\u2019s availability and create alerts for both apps to monitor issues.</p>"},{"location":"appinsights/#steps_1","title":"Steps","text":"<p>Follow these steps to implement web tests and alerts:</p> <ol> <li> <p>Create a web test for the WebApp.</p> </li> <li> <p>Set up alerts for both apps.</p> </li> <li> <p>Verify the web test and alert functionality.</p> </li> </ol> <p>Step 1: Create a Web Test</p> <p>In Application Insights for <code>taskmanagerweb-yourname</code>, go to Availability &gt; Add classic test. Configure:</p> <ul> <li>Test type: URL ping test.</li> <li>URL: <code>https://taskmanagerweb-yourname.azurewebsites.net</code>.</li> <li>Frequency: Every 5 minutes.</li> <li>Locations: Select 3 (e.g., West US, East US, West Europe).</li> <li>Success criteria: HTTP 200, timeout &lt; 30s.</li> </ul> <p>Save and run the test. Check results in Availability after 10-15 minutes.</p> <p>Step 2: Set Up Alerts</p> <p>For the WebApp:</p> <ul> <li>Go to Alerts &gt; Create alert rule.</li> <li>Condition: <code>Availability test failures</code> &gt; 0 in last 5 minutes.</li> <li>Action: Select Log alert to Azure Monitor (no email setup needed for exam prep).</li> <li>Name: <code>WebAppAvailabilityAlert</code>.</li> </ul> <p>For the Function App:</p> <ul> <li>Go to Application Insights for <code>taskmanagerfunc-yourname</code> &gt; Alerts &gt; Create alert rule.</li> <li>Condition: <code>Server response time</code> &gt; 3 seconds for <code>CreateTask</code> or <code>ManageTask</code>.</li> <li>Action: Log to Azure Monitor.</li> <li>Name: <code>FunctionResponseTimeAlert</code>.</li> </ul> <p>Test alerts:</p> <ul> <li>Temporarily stop the WebApp (via Overview &gt; Stop) to trigger the availability alert.</li> <li>Simulate slow Function App responses (e.g., add delay in code, redeploy, and test).</li> <li>Check Alerts &gt; View alerts for triggered rules.</li> </ul> <p>Step 3: Verify</p> <ul> <li>In WebApp\u2019s Application Insights, confirm Availability shows test results (green for success, red for failures).</li> <li>In Alerts, ensure rules logged incidents during tests.</li> </ul>"},{"location":"appinsights/#why_1","title":"Why","text":"<p>Web tests validate app uptime, and alerts enable proactive issue detection, both critical for the exam.</p>"},{"location":"appinsights/#instrument-an-app-or-service-to-use-application-insights","title":"Instrument an App or Service to Use Application Insights","text":"<p>Automatic instrumentation captures basic telemetry. We'll add custom telemetry to track specific actions in both apps.</p>"},{"location":"appinsights/#instrument-webapp","title":"Instrument WebApp","text":"<p>Follow these steps to instrument the WebApp with custom telemetry:</p> <ol> <li> <p>Add the Application Insights SDK.</p> </li> <li> <p>Update the HomeController to track custom events and page views.</p> </li> <li> <p>Test locally.</p> </li> <li> <p>Deploy to Azure.</p> </li> <li> <p>Verify custom telemetry in Application Insights.</p> </li> </ol> <p>Step 1: Add Application Insights SDK</p> <p>In the <code>TaskManagerWeb</code> directory, add the SDK.</p> <pre><code>dotnet add package Microsoft.ApplicationInsights.AspNetCore\n</code></pre> <p>Step 2: Update HomeController.cs</p> <p>Modify <code>Controllers/HomeController.cs</code>:</p> <pre><code>using Microsoft.ApplicationInsights;\nusing Microsoft.AspNetCore.Mvc;\nusing TaskManagerWeb.Models;\nusing System.Collections.Generic;\n\nnamespace TaskManagerWeb.Controllers\n{\n    public class HomeController : Controller\n    {\n        private static List&lt;TaskItem&gt; _tasks = new List&lt;TaskItem&gt;();\n        private readonly TelemetryClient _telemetryClient;\n\n        public HomeController(TelemetryClient telemetryClient)\n        {\n            _telemetryClient = telemetryClient;\n        }\n\n        public IActionResult Index()\n        {\n            _telemetryClient.TrackPageView(\"TaskManagerIndex\");\n            return View(_tasks);\n        }\n\n        [HttpPost]\n        public IActionResult Create(string title, string description, string dueDate)\n        {\n            _telemetryClient.TrackEvent(\"TaskCreated\", new Dictionary&lt;string, string&gt; { { \"Title\", title } });\n            var task = new TaskItem\n            {\n                Title = title,\n                Description = description,\n                DueDate = dueDate\n            };\n            _tasks.Add(task);\n            return RedirectToAction(\"Index\");\n        }\n    }\n}\n</code></pre> <p>Step 3: Test Locally</p> <p>Run the WebApp locally to test.</p> <pre><code>cd TaskManagerWeb\ndotnet run\n</code></pre> <p>Access <code>https://localhost:5001</code>, create a task, and reload the page.</p> <p>Step 4: Deploy</p> <p>Deploy to Azure.</p> <pre><code>az webapp up --name taskmanagerweb-yourname --resource-group az204exam\n</code></pre> <p>Test at <code>https://taskmanagerweb-yourname.azurewebsites.net</code>.</p> <p>Step 5: Verify</p> <p>In Application Insights for <code>taskmanagerweb-yourname</code>, go to Events.</p> <ul> <li>Search for <code>TaskCreated</code> (filter by <code>event name</code>) and <code>TaskManagerIndex</code> (under Page Views).</li> <li>Confirm properties like <code>Title</code> appear for <code>TaskCreated</code>.</li> </ul>"},{"location":"appinsights/#instrument-function-app","title":"Instrument Function App","text":"<p>Follow these steps to instrument the Function App with custom telemetry:</p> <ol> <li> <p>Add the Application Insights SDK (already included for .NET isolated Functions).</p> </li> <li> <p>Update ManageTask.cs to track custom events and metrics.</p> </li> <li> <p>Test locally.</p> </li> <li> <p>Deploy to Azure.</p> </li> <li> <p>Verify custom telemetry in Application Insights.</p> </li> </ol> <p>Step 2: Update ManageTask.cs</p> <p>Modify <code>ManageTask.cs</code>:</p> <pre><code>using System.IO;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Azure.Functions.Worker;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\nusing Microsoft.Azure.Cosmos;\nusing Microsoft.ApplicationInsights;\nusing System.Diagnostics;\n\nnamespace TaskManagerFunctions\n{\n    public class ManageTask\n    {\n        private readonly ILogger&lt;ManageTask&gt; _logger;\n        private readonly CosmosClient _cosmosClient;\n        private readonly TelemetryClient _telemetryClient;\n\n        public ManageTask(ILogger&lt;ManageTask&gt; logger, TelemetryClient telemetryClient)\n        {\n            _logger = logger;\n            _telemetryClient = telemetryClient;\n            _cosmosClient = new CosmosClient(Environment.GetEnvironmentVariable(\"CosmosDBConnection\"), new CosmosClientOptions { ConnectionMode = ConnectionMode.Direct });\n        }\n\n        public class TaskItem\n        {\n            public string id { get; set; } = Guid.NewGuid().ToString();\n            public string Title { get; set; }\n            public string Description { get; set; }\n            public string DueDate { get; set; }\n        }\n\n        [Function(\"ManageTask\")]\n        public async Task&lt;IActionResult&gt; Run(\n            [HttpTrigger(AuthorizationLevel.Function, \"post\", \"get\")] HttpRequest req)\n        {\n            _logger.LogInformation(\"Processing task in Cosmos DB.\");\n            var stopwatch = Stopwatch.StartNew();\n\n            var container = _cosmosClient.GetContainer(\"TasksDB\", \"Tasks\");\n\n            if (req.Method == \"POST\")\n            {\n                string requestBody = await new StreamReader(req.Body).ReadToEndAsync();\n                TaskItem task = JsonConvert.DeserializeObject&lt;TaskItem&gt;(requestBody);\n\n                if (string.IsNullOrEmpty(task?.Title))\n                {\n                    return new BadRequestObjectResult(\"Please provide a title.\");\n                }\n\n                task.id = Guid.NewGuid().ToString();\n                await container.CreateItemAsync(task, new PartitionKey(task.id));\n                stopwatch.Stop();\n                _telemetryClient.TrackMetric(\"TaskCreationTime\", stopwatch.ElapsedMilliseconds);\n                _telemetryClient.TrackEvent(\"TaskCreatedInCosmos\", new Dictionary&lt;string, string&gt; { { \"Title\", task.Title } });\n                _logger.LogInformation($\"Created task: {task.Title}\");\n                return new OkObjectResult(task);\n            }\n            else // GET\n            {\n                string taskId = req.Query[\"taskId\"];\n                if (string.IsNullOrEmpty(taskId))\n                {\n                    return new BadRequestObjectResult(\"Please provide taskId.\");\n                }\n\n                try\n                {\n                    var task = await container.ReadItemAsync&lt;TaskItem&gt;(taskId, new PartitionKey(taskId));\n                    _logger.LogInformation($\"Read task: {task.Resource.Title}\");\n                    return new OkObjectResult(task.Resource);\n                }\n                catch (CosmosException ex) when (ex.StatusCode == System.Net.HttpStatusCode.NotFound)\n                {\n                    return new NotFoundResult();\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>Step 3: Test Locally</p> <p>Update <code>local.settings.json</code> (if needed):</p> <pre><code>{\n    \"IsEncrypted\": false,\n    \"Values\": {\n        \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\",\n        \"FUNCTIONS_WORKER_RUNTIME\": \"dotnet-isolated\",\n        \"CosmosDBConnection\": \"[your-connection-string]\"\n    }\n}\n</code></pre> <p>Run the Function locally to test.</p> <pre><code>func start\n</code></pre> <p>POST a task:</p> <pre><code>curl -X POST http://localhost:7071/api/ManageTask -H \"Content-Type: application/json\" -d '{\"Title\":\"Cosmos Task\",\"Description\":\"Test SDK\",\"DueDate\":\"2025-04-15\"}'\n</code></pre> <p>Step 4: Deploy</p> <p>Deploy to Azure.</p> <pre><code>func azure functionapp publish taskmanagerfunc-yourname\n</code></pre> <p>Test:</p> <pre><code>curl -X POST https://taskmanagerfunc-yourname.azurewebsites.net/api/managetask?code=[your-key] -H \"Content-Type: application/json\" -d '{\"Title\":\"Azure Cosmos\",\"Description\":\"Deployed\",\"DueDate\":\"2025-04-15\"}'\n</code></pre> <p>Step 5: Verify</p> <p>In Application Insights for <code>taskmanagerfunc-yourname</code>:</p> <ul> <li>Go to Metrics &gt; Filter for <code>TaskCreationTime</code>.</li> <li>Go to Events &gt; Search for <code>TaskCreatedInCosmos</code> and check properties (e.g., <code>Title</code>).</li> <li>Confirm logs in Logs with <code>traces | where message contains \"Created task\"</code>.</li> </ul>"},{"location":"appinsights/#why_2","title":"Why","text":"<p>Custom instrumentation tracks specific behaviors (e.g., task creation, performance), exceeding auto-instrumentation and meeting exam requirements.</p>"},{"location":"appinsights/#verify-all-topics","title":"Verify All Topics","text":"<ul> <li>Metrics/Logs/Traces: Confirmed via Portal queries and Transaction search.</li> <li>Web Tests/Alerts: Set up and tested for WebApp availability and Function App performance.</li> <li>Instrumentation: Added custom events (<code>TaskCreated</code>, <code>TaskCreatedInCosmos</code>) and metrics (<code>TaskCreationTime</code>) to both apps.</li> </ul>"},{"location":"appinsights/#clean-up-optional","title":"Clean Up (Optional)","text":"<p>To avoid costs, delete all resources:</p> <pre><code>az group delete -n az204exam --no-wait --yes\n</code></pre>"},{"location":"appinsights/#next-steps","title":"Next Steps","text":"<ul> <li>Review telemetry in Application Insights to prepare exam-style questions.</li> <li>Move to \"Connect to and consume Azure services and third-party services\" (e.g., integrate with Microsoft Graph or APIs).</li> </ul>"},{"location":"auth/","title":"Implement user authentication and authorization","text":"<p>User Authentication and Authorization to hit the AZ-204 Exam Topics:</p> <ul> <li>Authenticate and authorize users by using the Microsoft Identity platform</li> <li>Authenticate and authorize users and apps by using Microsoft Entra ID</li> <li>Create and implement shared access signatures</li> <li>Implement solutions that interact with Microsoft Graph</li> </ul>"},{"location":"auth/#prerequisites","title":"Prerequisites","text":"<ul> <li>.NET SDK 8.0 (Install via winget: `winget install Microsoft.DotNet.SDK.8))</li> <li>Azure CLI (Install)</li> <li>Azure Functions Core Tools (Install)</li> <li>Azure Subscription (Free tier or $200 credit recommended)</li> <li>Existing Resource Group (<code>az204exam</code>)</li> </ul>"},{"location":"auth/#set-up-entra-id-app-registration","title":"Set Up Entra ID App Registration","text":"<p>Create App Registration:</p> <p>In Azure Portal, go to Microsoft Entra ID &gt; App registrations &gt; New registration.</p> <p>Name: TaskManagerWebApp.</p> <p>Supported account types: Select \u201cAccounts in this organizational directory only\u201d (or \u201cMultitenant\u201d for broader access). Redirect URI: Local: https://localhost:5001/signin-oidc (adjust port if different). Azure: https://taskmanagerweb-yourname.azurewebsites.net/signin-oidc (after deployment). Click Register. Note the Application (client) ID and Directory (tenant) ID. Verify Authentication Settings: In the app registration, go to Authentication. Ensure Web platform is selected with the redirect URI. Enable ID tokens (under Implicit grant and hybrid flows). Get Tenant Domain: In Microsoft Entra ID &gt; Overview, note the Primary domain (e.g., yourtenant.onmicrosoft.com). Update WebApp for Authentication Note: We\u2019ll modify our Task Manager WebApp to require login before users can view or create tasks.</p> <p>Add Microsoft Identity Package:</p> <p>Open a terminal in your WebApp project folder. Run:</p> <pre><code>dotnet add package Microsoft.Identity.Web\n</code></pre> <p>Configure Settings:</p> <p>Update appsettings.json:</p> <pre><code>{\n  \"AzureAd\": {\n    \"Instance\": \"https://login.microsoftonline.com/\",\n    \"Domain\": \"yourtenant.onmicrosoft.com\",\n    \"TenantId\": \"your-tenant-id\",\n    \"ClientId\": \"your-client-id\",\n    \"CallbackPath\": \"/signin-oidc\"\n  },\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft.AspNetCore\": \"Warning\"\n    }\n  },\n  \"AllowedHosts\": \"*\"\n}\n</code></pre> <p>Replace yourtenant.onmicrosoft.com, your-tenant-id, and your-client-id with values from the app registration.</p> <p>Update Program.cs:</p> <p>Modify Program.cs to add authentication services:</p> <pre><code>using Microsoft.Identity.Web;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\nbuilder.Services.AddRazorPages();\nbuilder.Services.AddControllersWithViews();\n\n// Add Microsoft Identity authentication\nbuilder.Services.AddAuthentication(OpenIdConnectDefaults.AuthenticationScheme)\n    .AddMicrosoftIdentityWebApp(builder.Configuration.GetSection(\"AzureAd\"));\n\nbuilder.Services.AddAuthorization();\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline.\nif (!app.Environment.IsDevelopment())\n{\n    app.UseExceptionHandler(\"/Error\");\n    app.UseHsts();\n}\n\napp.UseHttpsRedirection();\napp.UseStaticFiles();\n\napp.UseRouting();\n\napp.UseAuthentication();\napp.UseAuthorization();\n\napp.MapRazorPages();\napp.MapControllers();\n\napp.Run();\nCreate or Update Controller:\n\nSince your WebApp uses a Razor view with @model List&lt;TaskManagerWeb.Models.TaskItem&gt;, we\u2019ll create a controller to handle it.\nCreate Models/TaskItem.cs (if not already present):\ncsharp\n\nCopy\nnamespace TaskManagerWeb.Models\n{\n    public class TaskItem\n    {\n        public string Title { get; set; }\n        public string Description { get; set; }\n        public string DueDate { get; set; }\n    }\n}\n</code></pre> <p>Create Controllers/HomeController.cs:</p> <pre><code>using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing TaskManagerWeb.Models;\nusing System.Collections.Generic;\n\nnamespace TaskManagerWeb.Controllers\n{\n    [Authorize] // Require login\n    public class HomeController : Controller\n    {\n        public IActionResult Index()\n        {\n            // Mock task list (replace with CosmosDB later)\n            var tasks = new List&lt;TaskItem&gt;\n            {\n                new TaskItem { Title = \"Sample Task\", Description = \"Test auth\", DueDate = \"2025-04-15\" }\n            };\n            return View(tasks);\n        }\n\n        [HttpPost]\n        public IActionResult Create(string title, string description, string dueDate)\n        {\n            // Add task logic (e.g., save to CosmosDB)\n            // For now, redirect back to index\n            return RedirectToAction(\"Index\");\n        }\n    }\n}\n</code></pre> <p>Update Razor View:</p> <p>Ensure your view (Views/Home/Index.cshtml) matches the shared HTML/CSS but uses the controller. It\u2019s already good, but confirm it\u2019s in the right place:</p> <p>Path: Views/Home/Index.cshtml.</p> <p>If it\u2019s elsewhere (e.g., Pages/Index.cshtml), let me know, and we\u2019ll adjust.</p> <p>Add Sign-In/Out Links:</p> <p>Update Index.cshtml to show user info and sign-out option:</p> <pre><code>@model List&lt;TaskManagerWeb.Models.TaskItem&gt;\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;!-- Your existing CSS --&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Task Manager&lt;/h1&gt;\n    @if (User.Identity.IsAuthenticated)\n    {\n        &lt;p&gt;Welcome, @User.Identity.Name! &lt;a asp-controller=\"Home\" asp-action=\"SignOut\"&gt;Sign Out&lt;/a&gt;&lt;/p&gt;\n    }\n    else\n    {\n        &lt;p&gt;&lt;a href=\"/MicrosoftIdentity/Account/SignIn\"&gt;Sign In&lt;/a&gt;&lt;/p&gt;\n    }\n\n    &lt;form asp-action=\"Create\" method=\"post\"&gt;\n        &lt;div&gt;\n            &lt;label&gt;Title:&lt;/label&gt;\n            &lt;input type=\"text\" name=\"title\" required /&gt;\n        &lt;/div&gt;\n        &lt;div&gt;\n            &lt;label&gt;Description:&lt;/label&gt;\n            &lt;textarea name=\"description\"&gt;&lt;/textarea&gt;\n        &lt;/div&gt;\n        &lt;div&gt;\n            &lt;label&gt;Due Date:&lt;/label&gt;\n            &lt;input type=\"date\" name=\"dueDate\" required /&gt;\n        &lt;/div&gt;\n        &lt;button type=\"submit\"&gt;Add Task&lt;/button&gt;\n    &lt;/form&gt;\n\n    &lt;h2&gt;Tasks&lt;/h2&gt;\n    &lt;ul&gt;\n        @if (Model != null &amp;&amp; Model.Any())\n        {\n            foreach (var task in Model)\n            {\n                &lt;li&gt;\n                    &lt;div class=\"task-info\"&gt;\n                        &lt;strong&gt;@task.Title&lt;/strong&gt; - @task.Description\n                        &lt;br /&gt;\n                        &lt;small&gt;Due: @(task.DueDate ?? \"No due date\")&lt;/small&gt;\n                    &lt;/div&gt;\n                &lt;/li&gt;\n            }\n        }\n        else\n        {\n            &lt;li class=\"no-tasks\"&gt;No tasks yet.&lt;/li&gt;\n        }\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n</code></pre> <p>Add a SignOut action in HomeController.cs:</p> <pre><code>public IActionResult SignOut()\n{\n    return SignOut(\"Cookies\", OpenIdConnectDefaults.AuthenticationScheme);\n}\n</code></pre> <p>Test Locally</p> <p>Run WebApp:</p> <pre><code>cd TaskManagerWeb\ndotnet run\n</code></pre> <p>Access:</p> <p>Open https://localhost:5001 (adjust port if different).</p> <p>Expect a redirect to https://login.microsoftonline.com/... for login.</p> <p>Sign in with a Microsoft/Entra ID account.</p> <p>After login, see the Task Manager with \u201cWelcome, [Your Name]!\u201d.</p> <p>Verify:</p> <p>Without login, you can\u2019t access the task list.</p> <p>After login, you see tasks and can submit the form.</p> <p>Click Sign Out to end the session.</p> <p>Deploy and Test (Optional for Now):</p> <p>Deploy to Azure:</p> <pre><code>\naz webapp up --name taskmanagerweb-yourname --resource-group az204\n</code></pre> <p>Update redirect URI in Entra ID to https://taskmanagerweb-yourname.azurewebsites.net/signin-oidc.</p> <p>Test at https://taskmanagerweb-yourname.azurewebsites.net.</p>"},{"location":"cosmos/","title":"Develop Solutions that Use Azure Cosmos DB","text":"<p>This guide covers the AZ-204 exam topics for developing solutions with Azure Cosmos DB:</p> <ul> <li>Perform operations on containers and items by using the SDK</li> <li>Set the appropriate consistency level for operations</li> <li>Implement change feed notifications</li> </ul>"},{"location":"cosmos/#prerequisites","title":"Prerequisites","text":"<ul> <li>.NET SDK 8.0 (Install via winget: <code>winget install Microsoft.DotNet.SDK.8</code>)</li> <li>Azure CLI (Install)</li> <li>Azure Functions Core Tools (Install)</li> <li>Azure Subscription (Free tier or $200 credit recommended)</li> <li>Existing Resource Group (<code>az204exam</code>)</li> </ul>"},{"location":"cosmos/#set-up-cosmos-db","title":"Set Up Cosmos DB","text":"<p>Follow these steps to set up Azure Cosmos DB:</p> <ol> <li> <p>Create a Cosmos DB account in the Azure Portal.</p> </li> <li> <p>Create a database and container in the Cosmos DB account.</p> </li> </ol> <p>Step 1: Create a Cosmos DB Account</p> <p>In the Azure Portal, go to Azure Cosmos DB &gt; Create &gt; Choose NoSQL API. Configure:</p> <ul> <li>Resource group: <code>az204exam</code>.</li> <li>Account name: <code>taskmanagercosmos</code> (or unique, e.g., <code>taskmanagercosmosyourname</code>).</li> <li>Leave defaults (e.g., Free tier, multi-region writes off).</li> <li>Review tabs for learning, then Create.</li> </ul> <p></p> <p>Step 2: Create Database and Container</p> <p>In your Cosmos DB account, go to Data Explorer:</p> <ul> <li>Click New Database &gt; Name: <code>TasksDB</code> &gt; Provision throughput (leave default).</li> <li>Click New Container &gt; Use existing database: <code>TasksDB</code>.</li> <li>Container ID: <code>Tasks</code>.</li> <li>Partition key: <code>/id</code>.</li> <li>Throughput: 400 RU/s (manual, minimal for Free tier).</li> <li>Click OK.</li> </ul> <p></p>"},{"location":"cosmos/#perform-operations-with-the-sdk","title":"Perform Operations with the SDK","text":"<p>Note: We\u2019ll add a Function to create and read tasks in <code>TasksDB/Tasks</code>, keeping our web app in-memory for now.</p> <p>Follow these steps to perform operations with the Cosmos DB SDK:</p> <ol> <li> <p>Add the Cosmos DB SDK to the Function App.</p> </li> <li> <p>Get the Cosmos DB connection string and add it to the Function App.</p> </li> <li> <p>Create a ManageTask Function to handle task operations.</p> </li> <li> <p>Test locally (optional).</p> </li> <li> <p>Deploy and test in Azure.</p> </li> </ol> <p>Step 1: Add Cosmos DB SDK</p> <p>In the <code>TaskManagerFunctions</code> directory, run:</p> <pre><code>dotnet add package Microsoft.Azure.Cosmos\ndotnet add package Newtonsoft.Json\n</code></pre> <p>Step 2: Get Cosmos DB Connection</p> <p>In the Azure Portal, go to your Cosmos DB account &gt; Keys. Copy the Primary Connection String.</p> <p>In your Function App (<code>taskmanagerfunc-yourname</code>), go to Settings &gt; Environment Variables. Add:</p> <ul> <li>Name: <code>CosmosDBConnection</code>.</li> <li>Value: <code>[your-connection-string]</code>.</li> </ul> <p>Step 3: Create ManageTask Function</p> <p>Create a new HTTP-triggered Function.</p> <pre><code>cd TaskManagerFunctions\nfunc new --template \"HttpTrigger\" --name ManageTask\n</code></pre> <p>Edit <code>ManageTask.cs</code>:</p> <pre><code>using System.IO;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Azure.Functions.Worker;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\nusing Microsoft.Azure.Cosmos;\n\nnamespace TaskManagerFunctions\n{\n    public class ManageTask\n    {\n        private readonly ILogger&lt;ManageTask&gt; _logger;\n        private readonly CosmosClient _cosmosClient;\n\n        public ManageTask(ILogger&lt;ManageTask&gt; logger)\n        {\n            _logger = logger;\n            _cosmosClient = new CosmosClient(Environment.GetEnvironmentVariable(\"CosmosDBConnection\"), new CosmosClientOptions { ConnectionMode = ConnectionMode.Direct });\n        }\n\n        public class TaskItem\n        {\n            public string id { get; set; } = Guid.NewGuid().ToString();\n            public string Title { get; set; }\n            public string Description { get; set; }\n            public string DueDate { get; set; }\n        }\n\n        [Function(\"ManageTask\")]\n        public async Task&lt;IActionResult&gt; Run(\n            [HttpTrigger(AuthorizationLevel.Function, \"post\", \"get\")] HttpRequest req)\n        {\n            _logger.LogInformation(\"Processing task in Cosmos DB.\");\n\n            var container = _cosmosClient.GetContainer(\"TasksDB\", \"Tasks\");\n\n            if (req.Method == \"POST\")\n            {\n                string requestBody = await new StreamReader(req.Body).ReadToEndAsync();\n                TaskItem task = JsonConvert.DeserializeObject&lt;TaskItem&gt;(requestBody);\n\n                if (string.IsNullOrEmpty(task?.Title))\n                {\n                    return new BadRequestObjectResult(\"Please provide a title.\");\n                }\n\n                task.id = Guid.NewGuid().ToString();\n                await container.CreateItemAsync(task, new PartitionKey(task.id));\n                _logger.LogInformation($\"Created task: {task.Title}\");\n                return new OkObjectResult(task);\n            }\n            else // GET\n            {\n                string taskId = req.Query[\"taskId\"];\n                if (string.IsNullOrEmpty(taskId))\n                {\n                    return new BadRequestObjectResult(\"Please provide taskId.\");\n                }\n\n                try\n                {\n                    var task = await container.ReadItemAsync&lt;TaskItem&gt;(taskId, new PartitionKey(taskId));\n                    _logger.LogInformation($\"Read task: {task.Resource.Title}\");\n                    return new OkObjectResult(task.Resource);\n                }\n                catch (CosmosException ex) when (ex.StatusCode == System.Net.HttpStatusCode.NotFound)\n                {\n                    return new NotFoundResult();\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>Step 4: Test Locally (Optional)</p> <p>Update <code>local.settings.json</code> (don\u2019t overwrite values from previous lessons):</p> <pre><code>{\n    \"IsEncrypted\": false,\n    \"Values\": {\n        \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\",\n        \"FUNCTIONS_WORKER_RUNTIME\": \"dotnet-isolated\",\n        \"CosmosDBConnection\": \"[your-connection-string]\"\n    }\n}\n</code></pre> <p>Run the Function locally:</p> <pre><code>func start\n</code></pre> <p>POST (create task):</p> <pre><code>curl -X POST http://localhost:7071/api/ManageTask -H \"Content-Type: application/json\" -d '{\"Title\":\"Cosmos Task\",\"Description\":\"Test SDK\",\"DueDate\":\"2025-04-15\"}'\n</code></pre> <p>GET (read task, use <code>id</code> from POST response):</p> <pre><code>curl http://localhost:7071/api/ManageTask?taskId=[task-id]\n</code></pre> <p>Check Azure Portal &gt; Data Explorer &gt; <code>TasksDB/Tasks</code> for the task.</p> <p>Step 5: Deploy and Test</p> <p>Deploy the Function to Azure:</p> <pre><code>func azure functionapp publish taskmanagerfunc-yourname\n</code></pre> <p>Test:</p> <pre><code>curl -X POST https://taskmanagerfunc-yourname.azurewebsites.net/api/managetask?code=[your-key] -H \"Content-Type: application/json\" -d '{\"Title\":\"Azure Cosmos\",\"Description\":\"Deployed\",\"DueDate\":\"2025-04-15\"}'\ncurl https://taskmanagerfunc-yourname.azurewebsites.net/api/managetask?code=[your-key]&amp;taskId=[task-id]\n</code></pre> <p>Verify in Data Explorer.</p>"},{"location":"cosmos/#why","title":"Why","text":"<p>Creating and reading tasks with the SDK is a core exam skill, and it preps for web app integration.</p>"},{"location":"cosmos/#set-the-appropriate-consistency-level","title":"Set the Appropriate Consistency Level","text":"<p>Note: Cosmos DB offers consistency levels (Strong, Session, Eventual, etc.). We\u2019ll use Session for our tasks, balancing performance and accuracy.</p> <p>Follow these steps to set and verify the consistency level:</p> <ol> <li> <p>Configure the consistency level in the Azure Portal.</p> </li> <li> <p>Verify the consistency level in code.</p> </li> <li> <p>Test consistency with operations.</p> </li> </ol> <p>Step 1: Configure Consistency</p> <p>In the Azure Portal, go to your Cosmos DB account &gt; Settings &gt; Default consistency. Select Session &gt; Save.</p> <p>Step 2: Verify in Code</p> <p>In <code>ManageTask.cs</code>, we initialized:</p> <pre><code>_cosmosClient = new CosmosClient(Environment.GetEnvironmentVariable(\"CosmosDBConnection\"), new CosmosClientOptions { ConnectionMode = ConnectionMode.Direct });\n</code></pre> <p>Session consistency ensures clients see their own writes, ideal for task creation/reading.</p> <p>Step 3: Test Consistency</p> <p>Run the POST/GET tests from the previous section:</p> <ul> <li>POST a task, then GET it immediately.</li> <li>Check Data Explorer to confirm the task matches (e.g., same <code>Title</code>).</li> </ul>"},{"location":"cosmos/#why_1","title":"Why","text":"<p>Session consistency is common for apps like ours and often tested in the exam.</p>"},{"location":"cosmos/#implement-change-feed-notifications","title":"Implement Change Feed Notifications","text":"<p>Note: Change feed tracks changes in <code>Tasks</code>. We\u2019ll add a Function to log updates, useful for notifications.</p> <p>Follow these steps to implement change feed notifications:</p> <ol> <li> <p>Create a Change Feed Function.</p> </li> <li> <p>Test locally (optional).</p> </li> <li> <p>Deploy and test in Azure.</p> </li> </ol> <p>Step 1: Create Change Feed Function</p> <p>Create a new Cosmos DB Trigger Function.</p> <pre><code>cd TaskManagerFunctions\nfunc new --template \"Azure Cosmos DB Trigger\" --name TaskChangeFeed\n</code></pre> <p>Update <code>TaskChangeFeed.cs</code>:</p> <pre><code>using System.Collections.Generic;\nusing Microsoft.Azure.Functions.Worker;\nusing Microsoft.Extensions.Logging;\n\nnamespace TaskManagerFunctions\n{\n    public class TaskChangeFeed\n    {\n        private readonly ILogger&lt;TaskChangeFeed&gt; _logger;\n\n        public TaskChangeFeed(ILogger&lt;TaskChangeFeed&gt; logger)\n        {\n            _logger = logger;\n        }\n\n        [Function(\"TaskChangeFeed\")]\n        public void Run([CosmosDBTrigger(\n            databaseName: \"TasksDB\",\n            containerName: \"Tasks\",\n            Connection = \"CosmosDBConnection\",\n            LeaseContainerName = \"leases\",\n            CreateLeaseContainerIfNotExists = true)] IReadOnlyList&lt;TaskItem&gt; tasks)\n        {\n            foreach (var task in tasks)\n            {\n                _logger.LogInformation($\"Task updated: {task.Title}, ID: {task.id}\");\n            }\n        }\n\n        public class TaskItem\n        {\n            public string id { get; set; }\n            public string Title { get; set; }\n            public string Description { get; set; }\n            public string DueDate { get; set; }\n        }\n    }\n}\n</code></pre> <p>Step 2: Test Locally (Optional)</p> <p>Ensure <code>local.settings.json</code> has <code>CosmosDBConnection</code>.</p> <p>Run the Function locally:</p> <pre><code>func start\n</code></pre> <p>POST a task via <code>ManageTask</code> (as in the earlier section). Check the console for \u201cTask updated: [title], ID: [id]\u201d.</p> <p>Step 3: Deploy and Test</p> <p>Deploy the Function to Azure:</p> <pre><code>func azure functionapp publish taskmanagerfunc-yourname\n</code></pre> <p>POST a task via <code>ManageTask</code>. Check Azure Portal &gt; Functions &gt; <code>TaskChangeFeed</code> &gt; Monitor &gt; Logs for update logs.</p>"},{"location":"cosmos/#why_2","title":"Why","text":"<p>Change feed is a key exam topic, showing how to react to data changes (e.g., for notifications).</p>"},{"location":"events/","title":"Develop Event-Based Solutions","text":"<p>This guide covers the AZ-204 exam topics for developing event-based solutions using Azure Event Grid and Azure Event Hub. We'll enhance our <code>TaskManagerWeb</code> (WebApp) and <code>TaskManagerFunctions</code> (Function App) to handle events, integrating with our existing setup (including Cosmos DB and API Management). We'll use Event Grid to trigger actions on task creation and Event Hub to stream task updates for processing.</p>"},{"location":"events/#prerequisites","title":"Prerequisites","text":"<ul> <li>Azure Subscription (Free tier or $200 credit recommended).</li> <li>Existing Resource Group (<code>az204exam</code>).</li> <li>Deployed Apps:</li> <li>WebApp: <code>taskmanagerweb-yourname</code> (ASP.NET Core MVC, Free F1 tier).</li> <li>Function App: <code>taskmanagerfunc-yourname</code> (.NET 8 isolated, Consumption plan).</li> <li>Cosmos DB: <code>taskmanagercosmos</code> with <code>TasksDB/Tasks</code>.</li> <li>API Management: <code>taskmanagerapim-yourname</code>.</li> <li>Tools:</li> <li>.NET SDK 8.0: <code>winget install Microsoft.DotNet.SDK.8</code>.</li> <li>Azure CLI.</li> <li>Azure Functions Core Tools.</li> </ul>"},{"location":"events/#implement-solutions-that-use-azure-event-grid","title":"Implement Solutions that Use Azure Event Grid","text":"<p>We'll use Event Grid to trigger a new Function when a task is created in Cosmos DB, sending a notification via a webhook (simulated by another Function).</p>"},{"location":"events/#steps","title":"Steps","text":""},{"location":"events/#create-an-event-grid-trigger-function","title":"Create an Event Grid Trigger Function","text":"<p>Follow these steps to create an Event Grid Trigger Function:</p> <ol> <li> <p>Create the function in the <code>TaskManagerFunctions</code> directory and update its code.</p> </li> <li> <p>Set up an Event Grid Topic in the Azure Portal.</p> </li> <li> <p>Configure Cosmos DB as an Event Grid event source.</p> </li> <li> <p>Subscribe to the Event Grid Topic using the Azure Function as the endpoint.</p> </li> <li> <p>Deploy the updated Function App.</p> </li> <li> <p>Test the Event Grid integration by triggering a task creation.</p> </li> </ol> <p>Step 1: Create and Update the Event Grid Trigger Function</p> <p>In the <code>TaskManagerFunctions</code> directory, create the function and update <code>TaskCreatedNotification.cs</code>.</p> <pre><code>cd TaskManagerFunctions\nfunc new --template \"Azure Event Grid Trigger\" --name TaskCreatedNotification\n</code></pre> <p>Update <code>TaskCreatedNotification.cs</code>:</p> <pre><code>using Microsoft.Azure.Functions.Worker;\nusing Microsoft.Extensions.Logging;\nusing System.Text.Json;\n\nnamespace TaskManagerFunctions\n{\n    public class TaskCreatedNotification\n    {\n        private readonly ILogger&lt;TaskCreatedNotification&gt; _logger;\n\n        public TaskCreatedNotification(ILogger&lt;TaskCreatedNotification&gt; logger)\n        {\n            _logger = logger;\n        }\n\n        public class TaskItem\n        {\n            public string id { get; set; }\n            public string Title { get; set; }\n            public string Description { get; set; }\n            public string DueDate { get; set; }\n        }\n\n        [Function(\"TaskCreatedNotification\")]\n        public async Task Run([EventGridTrigger] object eventGridEvent)\n        {\n            _logger.LogInformation(\"Event Grid trigger fired: {event}\", JsonSerializer.Serialize(eventGridEvent));\n\n            // Extract task data (simplified for exam prep)\n            var eventData = JsonSerializer.Deserialize&lt;JsonElement&gt;(JsonSerializer.Serialize(eventGridEvent));\n            if (eventData.TryGetProperty(\"data\", out var data))\n            {\n                var task = JsonSerializer.Deserialize&lt;TaskItem&gt;(data.GetRawText());\n                _logger.LogInformation($\"Task created: {task.Title}, ID: {task.id}\");\n\n                // Simulate notification (e.g., call a webhook)\n                // In exam context, logging is enough to show event handling\n            }\n        }\n    }\n}\n</code></pre> <p>Step 2: Set Up Event Grid Topic</p> <p>In the Azure Portal, go to Create a resource &gt; Event Grid Topic &gt; Create. Configure as follows:</p> <ul> <li>Resource group: <code>az204exam</code>.</li> <li>Name: <code>taskcreatedtopic</code>.</li> <li>Location: Same as apps (e.g., West US 3).</li> </ul> <p>Step 3: Configure Cosmos DB Event Source</p> <p>In <code>taskmanagercosmos</code> &gt; Events &gt; Add Event Grid integration. Select:</p> <ul> <li>Topic: <code>taskcreatedtopic</code>.</li> <li>Event types: <code>Microsoft.Azure.CosmosDB.DocumentCreated</code>.</li> <li>Container: <code>TasksDB/Tasks</code>.</li> </ul> <p>Save.</p> <p>Step 4: Subscribe to Event Grid Topic</p> <p>In the Azure Portal, go to Event Grid Topics &gt; <code>taskcreatedtopic</code> &gt; + Event Subscription. Configure:</p> <ul> <li>Name: <code>taskcreatedsub</code>.</li> <li>Event type: <code>DocumentCreated</code>.</li> <li>Endpoint type: Azure Function.</li> <li>Endpoint: Select <code>taskmanagerfunc-yourname</code> &gt; <code>TaskCreatedNotification</code>.</li> </ul> <p>Step 5: Deploy the Function</p> <p>Deploy the updated Function App.</p> <pre><code>func azure functionapp publish taskmanagerfunc-yourname\n</code></pre> <p>Step 6: Test Event Grid</p> <p>Trigger a task creation via APIM (as set up in <code>apimanagement.md</code>).</p> <pre><code>curl -X POST https://taskmanagerapim-yourname.azure-api.net/functions/managetask -H \"Ocp-Apim-Subscription-Key: [your-key]\" -H \"Content-Type: application/json\" -d '{\"Title\":\"Event Grid Task\",\"Description\":\"Test\",\"DueDate\":\"2025-04-15\"}'\n</code></pre> <p>Verify:</p> <ul> <li>In the Azure Portal, go to <code>taskmanagerfunc-yourname</code> &gt; Functions &gt; <code>TaskCreatedNotification</code> &gt; Monitor &gt; Logs.</li> <li>Look for <code>Task created: Event Grid Task, ID: [guid]</code>.</li> <li>Check Cosmos DB &gt; <code>TasksDB/Tasks</code> to confirm the task exists.</li> </ul>"},{"location":"events/#implement-solutions-that-use-azure-event-hub","title":"Implement Solutions that Use Azure Event Hub","text":"<p>We'll use Event Hub to stream task updates from the WebApp, processing them with a new Function to log or analyze changes.</p>"},{"location":"events/#steps_1","title":"Steps","text":"<p>Follow these steps to implement Event Hub:</p> <ol> <li> <p>Create an Event Hub Namespace and Hub.</p> </li> <li> <p>Get the Event Hub connection string and add it to the Function App.</p> </li> <li> <p>Update the WebApp to send events to Event Hub.</p> </li> <li> <p>Create an Event Hub Trigger Function to process events.</p> </li> <li> <p>Test locally (optional).</p> </li> <li> <p>Deploy and test the solution in Azure.</p> </li> </ol> <p>Step 1: Create Event Hub Namespace and Hub</p> <p>In the Azure Portal, go to Create a resource &gt; Event Hubs &gt; Create. Configure:</p> <ul> <li>Resource group: <code>az204exam</code>.</li> <li>Namespace name: <code>taskmanagerhub-yourname</code>.</li> <li>Location: West US 3.</li> <li>Pricing tier: Basic (exam-friendly).</li> </ul> <p>Inside the namespace, create an Event Hub:</p> <ul> <li>Name: <code>taskevents</code>.</li> <li>Partition count: 2 (minimal for exam).</li> <li>Message retention: 1 day.</li> </ul> <p>Step 2: Get Connection String and Add to Function App</p> <p>In <code>taskmanagerhub-yourname</code> &gt; Shared access policies &gt; RootManageSharedAccessKey, copy the Primary Connection String.</p> <p>Add it to the Function App:</p> <ul> <li>In <code>taskmanagerfunc-yourname</code> &gt; Settings &gt; Environment Variables.</li> <li>Add:</li> <li>Name: <code>EventHubConnection</code>.</li> <li>Value: <code>[your-connection-string]</code>.</li> <li>Save.</li> </ul> <p>Step 3: Update WebApp to Send Events</p> <p>In <code>TaskManagerWeb</code>, add the Event Hubs SDK and update the controller to send events.</p> <pre><code>cd TaskManagerWeb\ndotnet add package Azure.Messaging.EventHubs\n</code></pre> <p>Update <code>Controllers/HomeController.cs</code>:</p> <pre><code>using Microsoft.AspNetCore.Mvc;\nusing TaskManagerWeb.Models;\nusing System.Collections.Generic;\nusing Azure.Messaging.EventHubs;\nusing Azure.Messaging.EventHubs.Producer;\nusing System.Text;\nusing System.Text.Json;\n\nnamespace TaskManagerWeb.Controllers\n{\n    public class HomeController : Controller\n    {\n        private static List&lt;TaskItem&gt; _tasks = new List&lt;TaskItem&gt;();\n        private readonly EventHubProducerClient _eventHubClient;\n\n        public HomeController()\n        {\n            // Use environment variable in Azure; fallback for local testing\n            var connectionString = Environment.GetEnvironmentVariable(\"EventHubConnection\") ?? \"your-local-connection-string\";\n            _eventHubClient = new EventHubProducerClient(connectionString, \"taskevents\");\n        }\n\n        public IActionResult Index()\n        {\n            return View(_tasks);\n        }\n\n        [HttpPost]\n        public async Task&lt;IActionResult&gt; Create(string title, string description, string dueDate)\n        {\n            var task = new TaskItem\n            {\n                Title = title,\n                Description = description,\n                DueDate = dueDate\n            };\n            _tasks.Add(task);\n\n            // Send event to Event Hub\n            var eventData = new EventData(Encoding.UTF8.GetBytes(JsonSerializer.Serialize(task)));\n            await _eventHubClient.SendAsync(new[] { eventData });\n\n            return RedirectToAction(\"Index\");\n        }\n    }\n}\n</code></pre> <p>Add to <code>appsettings.json</code>:</p> <pre><code>{\n  \"EventHubConnection\": \"\"\n}\n</code></pre> <p>Deploy the WebApp and add the environment variable:</p> <pre><code>az webapp up --name taskmanagerweb-yourname --resource-group az204exam\n</code></pre> <p>In <code>taskmanagerweb-yourname</code> &gt; Settings &gt; Environment Variables, add:</p> <ul> <li>Name: <code>EventHubConnection</code>.</li> <li>Value: <code>[your-connection-string]</code>.</li> </ul> <p>Step 4: Create Event Hub Trigger Function</p> <p>In <code>TaskManagerFunctions</code>, create the Event Hub Trigger Function and update its code.</p> <pre><code>func new --template \"Event Hub Trigger\" --name ProcessTaskEvents\n</code></pre> <p>Update <code>ProcessTaskEvents.cs</code>:</p> <pre><code>using Microsoft.Azure.Functions.Worker;\nusing Microsoft.Extensions.Logging;\nusing System.Text;\n\nnamespace TaskManagerFunctions\n{\n    public class ProcessTaskEvents\n    {\n        private readonly ILogger&lt;ProcessTaskEvents&gt; _logger;\n\n        public ProcessTaskEvents(ILogger&lt;ProcessTaskEvents&gt; logger)\n        {\n            _logger = logger;\n        }\n\n        [Function(\"ProcessTaskEvents\")]\n        public void Run([EventHubTrigger(\"taskevents\", Connection = \"EventHubConnection\")] string[] events)\n        {\n            foreach (var eventData in events)\n            {\n                _logger.LogInformation($\"Event Hub message: {eventData}\");\n            }\n        }\n    }\n}\n</code></pre> <p>Step 5: Test Locally (Optional)</p> <p>Update <code>local.settings.json</code> in <code>TaskManagerFunctions</code>:</p> <pre><code>{\n    \"IsEncrypted\": false,\n    \"Values\": {\n        \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\",\n        \"FUNCTIONS_WORKER_RUNTIME\": \"dotnet-isolated\",\n        \"CosmosDBConnection\": \"[your-cosmos-connection]\",\n        \"EventHubConnection\": \"[your-eventhub-connection]\"\n    }\n}\n</code></pre> <p>Run the WebApp and Function locally to test:</p> <pre><code>cd TaskManagerWeb\ndotnet run\n</code></pre> <p>Create a task via <code>https://localhost:5001</code>.</p> <p>Run the Function in a separate terminal:</p> <pre><code>cd ../TaskManagerFunctions\nfunc start\n</code></pre> <p>Check the Function's console for <code>Event Hub message: {\"id\":\"[guid]\",\"Title\":\"Test Task\",...}</code>.</p> <p>Step 6: Deploy and Test</p> <p>Deploy the Function and test in Azure.</p> <pre><code>func azure functionapp publish taskmanagerfunc-yourname\n</code></pre> <p>Test:</p> <ul> <li>Access <code>https://taskmanagerweb-yourname.azurewebsites.net</code> and create a task.</li> <li>In the Azure Portal, go to <code>taskmanagerfunc-yourname</code> &gt; Functions &gt; <code>ProcessTaskEvents</code> &gt; Monitor &gt; Logs.</li> <li>Verify logs show <code>Event Hub message</code> with task data.</li> <li>Check Event Hub metrics in <code>taskmanagerhub-yourname</code> &gt; Metrics; look for <code>Incoming Messages</code>.</li> </ul>"},{"location":"events/#verify-all-topics","title":"Verify All Topics","text":"<ul> <li>Event Grid: Triggered <code>TaskCreatedNotification</code> on Cosmos DB task creation.</li> <li>Event Hub: Streamed WebApp task updates to <code>ProcessTaskEvents</code>.</li> </ul>"},{"location":"events/#clean-up-optional","title":"Clean Up (Optional)","text":"<p>To avoid costs, delete all resources:</p> <pre><code>az group delete -n az204exam --no-wait --yes\n</code></pre>"},{"location":"events/#next-steps","title":"Next Steps","text":"<ul> <li>Enhance <code>TaskCreatedNotification</code> to call an external webhook (e.g., via HTTP request).</li> <li>Scale Event Hub processing with multiple partitions for exam scenarios.</li> <li>Move to the final topic: message-based solutions (e.g., Azure Service Bus, Queue Storage).</li> </ul>"},{"location":"functions/","title":"Create Azure Functions for APIs","text":"<p>This guide covers the AZ-204 exam topics for creating and configuring Azure Functions:</p> <ul> <li>Create and configure an Azure Functions app</li> <li>Implement input and output bindings</li> <li>Implement function triggers by using data operations, timers, and webhooks</li> </ul>"},{"location":"functions/#prerequisites","title":"Prerequisites","text":"<ul> <li>.NET SDK 8.0 (Install via winget: <code>winget install Microsoft.DotNet.SDK.8</code>)</li> <li>Azure CLI (Install)</li> <li>Azure Functions Core Tools (Install)</li> <li>Azure Subscription (Free tier or $200 credit recommended for minimal costs)</li> <li>Azurite (Install)</li> <li>Existing Resource Group</li> </ul>"},{"location":"functions/#setup-azure-functions-app","title":"Setup Azure Functions App","text":"<p>Follow these steps to set up and deploy an Azure Functions app:</p> <ol> <li> <p>Create a new Function App in the Azure Portal.</p> </li> <li> <p>Create a Function project locally.</p> </li> <li> <p>Move into the project directory.</p> </li> <li> <p>Build the Function.</p> </li> <li> <p>Test the Function locally.</p> </li> <li> <p>Deploy the Function to Azure.</p> </li> <li> <p>Retrieve the Function key.</p> </li> <li> <p>Test the deployed Function.</p> </li> </ol> <p>Step 1: Create a New Function App</p> <p>In the Azure Portal, create a new Function App:</p> <ul> <li>Check out the tabs for a learning experience; we are leaving them as default.</li> </ul> <p></p> <p>Step 2: Create a Function Project Locally</p> <p>From your root directory, build your Function project.</p> <pre><code>func init TaskManagerFunctions --dotnet-isolated --target-framework net8.0\n</code></pre> <p>Step 3: Move into the Project Directory</p> <p>Navigate into the <code>TaskManagerFunctions</code> directory.</p> <pre><code>cd TaskManagerFunctions\n</code></pre> <p>Step 4: Build the Function</p> <p>Create a new HTTP-triggered Function.</p> <pre><code>func new --template \"HttpTrigger\" --name CreateTask\n</code></pre> <p>Step 5: Test the Function Locally</p> <p>Run the Function locally to test it.</p> <pre><code>func start\n</code></pre> <p>You should see output like:</p> <pre><code>Functions:\n    CreateTask: [GET,POST] http://localhost:7071/api/CreateTask\n</code></pre> <p>Open a browser and go to:</p> <pre><code>http://localhost:7071/api/CreateTask?name=Test\n</code></pre> <p>Expected response:</p> <pre><code>This HTTP triggered function executed successfully. Pass a name in the query string or in the request body for a personalized response.\n</code></pre> <p>Step 6: Deploy to Azure</p> <p>Deploy the Function to Azure.</p> <pre><code>func azure functionapp publish taskmanagerfunc-yourname #replace with your function name\n</code></pre> <p>Watch for the \u201cFunctions in taskmanagerfunc-yourname\u201d section in the output. It should list:</p> <pre><code>Functions in taskmanagerfunc-yourname:\n    CreateTask - [httpTrigger]\n        Invoke url: https://taskmanagerfunc-yourname.azurewebsites.net/api/createtask?code=...\n</code></pre> <p>Step 7: Retrieve the Function Key</p> <p>Retrieve the default Function key.</p> <pre><code>az functionapp function keys list --resource-group az204exam --name taskmanagerfunc-yourname --function-name CreateTask\n</code></pre> <p>Save the default key value for the next step.</p> <p>Step 8: Test the Deployed Function</p> <p>Construct the URL using the invoke URL from Step 6 and append your default key. It should look like:</p> <pre><code>https://taskmanagerfunc-yourname.azurewebsites.net/api/createtask?code=THISISYOURCODEFROMSTEP7&amp;name=Test\n</code></pre> <p>You should see:</p> <pre><code>Hello, Test. This HTTP triggered function executed successfully.\n</code></pre>"},{"location":"functions/#add-blob-storage-placeholder","title":"Add Blob Storage (Placeholder)","text":"<p>Note: We\u2019ll use Blob Storage to store tasks, prepping for Cosmos DB later. Blob Storage and Cosmos DB are in a separate exam topic, but we need to create a Storage Account for use in triggers and outputs.</p> <p>Follow these steps to set up Blob Storage:</p> <ol> <li> <p>Create a Storage Account.</p> </li> <li> <p>Get the Storage connection string.</p> </li> <li> <p>Add the connection string to the Function App.</p> </li> </ol> <p>Step 1: Create a Storage Account</p> <p>In the Azure Portal, create a Storage Account:</p> <ul> <li>Name: <code>taskmanagerstoreyourname</code>.</li> <li>Resource group: <code>az204</code>.</li> <li>Region: <code>West US3</code>.</li> <li>Primary Service: <code>Azure Blob Storage or Azure Data Lake Storage Gen 2</code>.</li> <li>Redundancy: <code>LRS</code>.</li> </ul> <p>After creation, go to Data Storage &gt; Containers &gt; Create container named <code>tasks</code>.</p> <p>Step 2: Get the Connection String</p> <p>In the Storage Account, go to Access keys and copy the Connection string for <code>key1</code>.</p> <p>Step 3: Add to Function App</p> <p>In your Function App (<code>taskmanagerfunc-yourname</code>), go to Settings &gt; Environment Variables.</p> <ul> <li>Click New+ Add Button.</li> <li>Name: <code>StorageConnection</code>, Value: <code>[your-connection-string]</code>.</li> <li>Save and restart.</li> </ul>"},{"location":"functions/#implement-input-and-output-bindings","title":"Implement Input and Output Bindings","text":"<p>Note: We\u2019ll use HTTP to read task data (input) and Blob Storage to save tasks (output), matching our web app\u2019s tasks.</p> <p>Follow these steps to implement input and output bindings:</p> <ol> <li> <p>Add the Blob Storage SDK.</p> </li> <li> <p>Update the CreateTask Function to use bindings.</p> </li> <li> <p>Test locally.</p> </li> <li> <p>Deploy and test in Azure.</p> </li> </ol> <p>Step 1: Add Blob Storage SDK</p> <p>In the <code>TaskManagerFunctions</code> directory, run:</p> <pre><code>dotnet add package Microsoft.Azure.Functions.Worker\ndotnet add package Microsoft.Azure.Functions.Worker.Sdk\ndotnet add package Microsoft.Azure.Functions.Worker.Extensions.Storage\ndotnet add package Microsoft.Azure.Functions.Worker.Extensions.Http\ndotnet add package Microsoft.Azure.Functions.Worker.Extensions.Storage\n</code></pre> <p>Step 2: Update CreateTask Function</p> <p>Replace <code>CreateTask.cs</code> with:</p> <pre><code>using System;\nusing System.IO;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.Azure.Functions.Worker;\nusing Microsoft.Azure.Functions.Worker.Http;\nusing Microsoft.Extensions.Logging;\n\nnamespace TaskManagerFunctions\n{\n    public class CreateTask\n    {\n        private readonly ILogger&lt;CreateTask&gt; _logger;\n\n        public CreateTask(ILogger&lt;CreateTask&gt; logger)\n        {\n            _logger = logger;\n        }\n\n        public class TaskItem\n        {\n            public string Id { get; set; } = Guid.NewGuid().ToString();\n            public string? Title { get; set; } // Nullable to avoid CS8618\n            public string? Description { get; set; } // Nullable\n            public string? DueDate { get; set; } // Nullable\n        }\n\n        [Function(\"CreateTask\")]\n        public async Task&lt;MultiOutput&gt; Run(\n            [HttpTrigger(AuthorizationLevel.Function, \"post\", Route = null)] HttpRequestData req)\n        {\n            _logger.LogInformation(\"Creating new task.\");\n\n            // Read the request body\n            string requestBody = await new StreamReader(req.Body).ReadToEndAsync();\n            TaskItem? task = JsonSerializer.Deserialize&lt;TaskItem&gt;(requestBody, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n\n            if (task == null || string.IsNullOrEmpty(task.Title))\n            {\n                var badRequestResponse = req.CreateResponse(System.Net.HttpStatusCode.BadRequest);\n                await badRequestResponse.WriteStringAsync(\"Please provide a valid task with a title.\");\n                return new MultiOutput\n                {\n                    Response = badRequestResponse,\n                    BlobOutput = null\n                };\n            }\n\n            // Generate a new ID for the task\n            task.Id = Guid.NewGuid().ToString();\n            _logger.LogInformation($\"Saving task: {task.Title}\");\n\n            // Serialize the task to JSON for Blob storage\n            string blobOutput = JsonSerializer.Serialize(task);\n\n            // Return a success response\n            var response = req.CreateResponse(System.Net.HttpStatusCode.OK);\n            await response.WriteAsJsonAsync(task);\n\n            return new MultiOutput\n            {\n                Response = response,\n                BlobOutput = blobOutput\n            };\n        }\n\n        // Define the multi-output response\n        public class MultiOutput\n        {\n            public HttpResponseData Response { get; set; }\n            [BlobOutput(\"tasks/{Id}.json\", Connection = \"AzureWebJobsStorage\")]\n            public string BlobOutput { get; set; }\n        }\n    }\n}\n</code></pre> <p>Step 3: Test Locally</p> <p>Update <code>local.settings.json</code>:</p> <pre><code>{\n    \"IsEncrypted\": false,\n    \"Values\": {\n      \"AzureWebJobsStorage\": \"DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;\",\n      \"FUNCTIONS_WORKER_RUNTIME\": \"dotnet-isolated\"\n    }\n}\n</code></pre> <p>Run the Function locally:</p> <pre><code>func start\n</code></pre> <p>POST a task using curl or Postman:</p> <pre><code>curl -X POST http://localhost:7071/api/CreateTask -H \"Content-Type: application/json\" -d '{\"Title\":\"Test Task\",\"Description\":\"Do this\",\"DueDate\":\"2025-04-15\"}'\n</code></pre> <p>Check the <code>tasks</code> container (local Azurite or Azure Portal) for a <code>[guid].json</code> file with the task JSON.</p> <p>Step 4: Deploy and Test</p> <p>Deploy the Function to Azure:</p> <pre><code>func azure functionapp publish taskmanagerfunc-yourname\n</code></pre> <p>Test:</p> <pre><code>curl -X POST https://taskmanagerfunc-yourname.azurewebsites.net/api/createtask?code=[your-key] -H \"Content-Type: application/json\" -d '{\"Title\":\"Azure Task\",\"Description\":\"Deployed\",\"DueDate\":\"2025-04-15\"}'\n</code></pre> <p>Verify the <code>tasks</code> container in the Azure Portal has a new JSON file.</p>"},{"location":"functions/#why","title":"Why","text":"<p>HTTP input reads task data, and Blob output saves it, hitting exam goals. This also preps for Cosmos DB without needing it now.</p>"},{"location":"functions/#implement-function-triggers","title":"Implement Function Triggers","text":"<p>Note: Our HTTP trigger covers webhooks. We\u2019ll add a timer trigger and Blob trigger for data operations.</p> <p>Follow these steps to implement additional function triggers:</p> <ol> <li> <p>Add a Timer Trigger.</p> </li> <li> <p>Add a Blob Trigger.</p> </li> <li> <p>Test locally.</p> </li> <li> <p>Deploy and test in Azure.</p> </li> </ol> <p>Step 1: Add a Timer Trigger</p> <p>In <code>TaskManagerFunctions</code>, create a Timer Trigger Function.</p> <pre><code>func new --template \"TimerTrigger\" --name CheckTasks\n</code></pre> <p>Edit <code>CheckTasks.cs</code>:</p> <pre><code>using Microsoft.Azure.Functions.Worker;\nusing Microsoft.Extensions.Logging;\n\nnamespace TaskManagerFunctions\n{\n    public class CheckTasks\n    {\n        private readonly ILogger&lt;CheckTasks&gt; _logger;\n\n        public CheckTasks(ILogger&lt;CheckTasks&gt; logger)\n        {\n            _logger = logger;\n        }\n\n        [Function(\"CheckTasks\")]\n        public void Run([TimerTrigger(\"0 */5 * * * *\")] TimerInfo myTimer)\n        {\n            _logger.LogInformation($\"Timer triggered at: {DateTime.Now}\");\n            _logger.LogInformation(\"Checking tasks (placeholder for future logic)...\");\n        }\n    }\n}\n</code></pre> <p>Note: This runs every 5 minutes.</p> <p>Step 2: Add a Blob Trigger</p> <p>Create a Blob Trigger Function.</p> <pre><code>func new --template \"BlobTrigger\" --name ProcessTask\n</code></pre> <p>Edit <code>ProcessTask.cs</code>:</p> <pre><code>using Microsoft.Azure.Functions.Worker;\nusing Microsoft.Extensions.Logging;\n\nnamespace TaskManagerFunctions\n{\n    public class ProcessTask\n    {\n        private readonly ILogger&lt;ProcessTask&gt; _logger;\n\n        public ProcessTask(ILogger&lt;ProcessTask&gt; logger)\n        {\n            _logger = logger;\n        }\n\n        [Function(\"ProcessTask\")]\n        public void Run([BlobTrigger(\"tasks/{name}.json\", Connection = \"StorageConnection\")] string taskJson)\n        {\n            _logger.LogInformation($\"New task file detected: {taskJson}\");\n        }\n    }\n}\n</code></pre> <p>Step 3: Test Locally</p> <p>Ensure <code>local.settings.json</code> has the <code>StorageConnection</code>.</p> <p>Run the Function locally:</p> <pre><code>func start\n</code></pre> <ul> <li>For the timer: Wait 5 minutes and see \u201cChecking tasks...\u201d in the console.</li> <li>For the Blob: Add a JSON file to the <code>tasks</code> container (via Azurite or Azure Portal), and check the console for \u201cNew task file detected...\u201d.</li> </ul> <p>Step 4: Deploy and Test</p> <p>Deploy the Function to Azure:</p> <pre><code>func azure functionapp publish taskmanagerfunc-yourname\n</code></pre> <p>Test:</p> <ul> <li>Timer: Wait 5 minutes, then check Azure Portal &gt; Functions &gt; CheckTasks &gt; Monitor &gt; Logs.</li> <li>Blob: Upload a JSON file to the <code>tasks</code> container, then check ProcessTask logs.</li> </ul>"},{"location":"functions/#why_1","title":"Why","text":"<p>Timer (scheduled), Blob (data operation), and HTTP (webhook) triggers cover all exam requirements.</p>"},{"location":"functions/#next-steps","title":"Next Steps","text":"<ul> <li>Do everything again, but use the CLI where possible.</li> <li>If you are going to take a break, you could clean up here, but the next section builds on what we have done here.</li> </ul>"},{"location":"message/","title":"Develop Message-Based Solutions","text":"<p>This guide covers the AZ-204 exam topics for developing message-based solutions using Azure Service Bus and Azure Queue Storage. We'll extend our <code>TaskManagerWeb</code> (WebApp) and <code>TaskManagerFunctions</code> (Function App) to handle task-related messages, integrating with our existing setup (Cosmos DB, API Management, Event Grid, and Event Hub). We'll use Service Bus for reliable task notifications and Queue Storage for background task processing.</p>"},{"location":"message/#prerequisites","title":"Prerequisites","text":"<ul> <li>Azure Subscription (Free tier or $200 credit recommended).</li> <li>Existing Resource Group (<code>az204exam</code>).</li> <li>Deployed Apps:</li> <li>WebApp: <code>taskmanagerweb-yourname</code> (ASP.NET Core MVC, Free F1 tier).</li> <li>Function App: <code>taskmanagerfunc-yourname</code> (.NET 8 isolated, Consumption plan).</li> <li>Cosmos DB: <code>taskmanagercosmos</code> with <code>TasksDB/Tasks</code>.</li> <li>API Management: <code>taskmanagerapim-yourname</code>.</li> <li>Tools:</li> <li>.NET SDK 8.0: <code>winget install Microsoft.DotNet.SDK.8</code>.</li> <li>Azure CLI.</li> <li>Azure Functions Core Tools.</li> </ul>"},{"location":"message/#implement-solutions-that-use-azure-service-bus","title":"Implement Solutions that Use Azure Service Bus","text":"<p>We'll use Azure Service Bus to send task creation notifications from the WebApp, processed by a Function App to log or simulate sending emails.</p>"},{"location":"message/#steps","title":"Steps","text":"<p>Follow these steps to implement Azure Service Bus:</p> <ol> <li> <p>Create a Service Bus Namespace and Queue.</p> </li> <li> <p>Get the Service Bus connection string and add it to the Function App.</p> </li> <li> <p>Update the WebApp to send messages to Service Bus.</p> </li> <li> <p>Create a Service Bus Trigger Function to process messages.</p> </li> <li> <p>Test locally (optional).</p> </li> <li> <p>Deploy and test the solution in Azure.</p> </li> </ol> <p>Step 1: Create Service Bus Namespace and Queue</p> <p>In the Azure Portal, go to Create a resource &gt; Service Bus &gt; Create. Configure:</p> <ul> <li>Resource group: <code>az204exam</code>.</li> <li>Namespace name: <code>taskmanagersb-yourname</code> (globally unique).</li> <li>Location: Same as apps (e.g., West US 3).</li> <li>Pricing tier: Basic (exam-friendly, low cost).</li> </ul> <p>Inside the namespace, create a queue:</p> <ul> <li>Name: <code>tasknotifications</code>.</li> <li>Defaults: Max size 1 GB, message TTL 14 days.</li> </ul> <p>Alternatively, use the Azure CLI:</p> <pre><code>az servicebus namespace create --name taskmanagersb-yourname --resource-group az204exam --location westus3 --sku Basic\naz servicebus queue create --name tasknotifications --namespace-name taskmanagersb-yourname --resource-group az204exam\n</code></pre> <p>Step 2: Get Connection String and Add to Function App</p> <p>In <code>taskmanagersb-yourname</code> &gt; Shared access policies &gt; RootManageSharedAccessKey, copy the Primary Connection String.</p> <p>Add it to the Function App:</p> <ul> <li>In <code>taskmanagerfunc-yourname</code> &gt; Settings &gt; Environment Variables.</li> <li>Add:</li> <li>Name: <code>ServiceBusConnection</code>.</li> <li>Value: <code>[your-connection-string]</code>.</li> <li>Save.</li> </ul> <p>Step 3: Update WebApp to Send Messages</p> <p>In <code>TaskManagerWeb</code>, add the Service Bus SDK and update the controller to send messages.</p> <pre><code>cd TaskManagerWeb\ndotnet add package Azure.Messaging.ServiceBus\n</code></pre> <p>Update <code>Controllers/HomeController.cs</code>:</p> <pre><code>using Microsoft.AspNetCore.Mvc;\nusing TaskManagerWeb.Models;\nusing System.Collections.Generic;\nusing Azure.Messaging.ServiceBus;\nusing System.Text.Json;\n\nnamespace TaskManagerWeb.Controllers\n{\n    public class HomeController : Controller\n    {\n        private static List&lt;TaskItem&gt; _tasks = new List&lt;TaskItem&gt;();\n        private readonly ServiceBusClient _serviceBusClient;\n\n        public HomeController()\n        {\n            var connectionString = Environment.GetEnvironmentVariable(\"ServiceBusConnection\") ?? \"your-local-connection-string\";\n            _serviceBusClient = new ServiceBusClient(connectionString);\n        }\n\n        public IActionResult Index()\n        {\n            return View(_tasks);\n        }\n\n        [HttpPost]\n        public async Task&lt;IActionResult&gt; Create(string title, string description, string dueDate)\n        {\n            var task = new TaskItem\n            {\n                Title = title,\n                Description = description,\n                DueDate = dueDate\n            };\n            _tasks.Add(task);\n\n            // Send message to Service Bus\n            var sender = _serviceBusClient.CreateSender(\"tasknotifications\");\n            var message = new ServiceBusMessage(JsonSerializer.Serialize(task));\n            await sender.SendMessageAsync(message);\n            await sender.DisposeAsync();\n\n            return RedirectToAction(\"Index\");\n        }\n    }\n}\n</code></pre> <p>Update <code>appsettings.json</code>:</p> <pre><code>{\n  \"ServiceBusConnection\": \"\",\n  \"EventHubConnection\": \"\"\n}\n</code></pre> <p>Deploy the WebApp and add the environment variable:</p> <pre><code>az webapp up --name taskmanagerweb-yourname --resource-group az204exam\n</code></pre> <p>In <code>taskmanagerweb-yourname</code> &gt; Settings &gt; Environment Variables, add:</p> <ul> <li>Name: <code>ServiceBusConnection</code>.</li> <li>Value: <code>[your-connection-string]</code>.</li> </ul> <p>Step 4: Create Service Bus Trigger Function</p> <p>In <code>TaskManagerFunctions</code>, create the Service Bus Trigger Function and update its code.</p> <pre><code>cd TaskManagerFunctions\nfunc new --template \"Azure Service Bus Queue Trigger\" --name ProcessTaskNotification\n</code></pre> <p>Update <code>ProcessTaskNotification.cs</code>:</p> <pre><code>using Microsoft.Azure.Functions.Worker;\nusing Microsoft.Extensions.Logging;\n\nnamespace TaskManagerFunctions\n{\n    public class ProcessTaskNotification\n    {\n        private readonly ILogger&lt;ProcessTaskNotification&gt; _logger;\n\n        public ProcessTaskNotification(ILogger&lt;ProcessTaskNotification&gt; logger)\n        {\n            _logger = logger;\n        }\n\n        [Function(\"ProcessTaskNotification\")]\n        public void Run([ServiceBusQueueTrigger(\"tasknotifications\", Connection = \"ServiceBusConnection\")] string message)\n        {\n            _logger.LogInformation($\"Service Bus message: {message}\");\n            // Simulate email notification or logging\n        }\n    }\n}\n</code></pre> <p>Step 5: Test Locally (Optional)</p> <p>Update <code>local.settings.json</code> in <code>TaskManagerFunctions</code>:</p> <pre><code>{\n    \"IsEncrypted\": false,\n    \"Values\": {\n        \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\",\n        \"FUNCTIONS_WORKER_RUNTIME\": \"dotnet-isolated\",\n        \"CosmosDBConnection\": \"[your-cosmos-connection]\",\n        \"EventHubConnection\": \"[your-eventhub-connection]\",\n        \"ServiceBusConnection\": \"[your-servicebus-connection]\"\n    }\n}\n</code></pre> <p>Run the WebApp and Function locally to test:</p> <pre><code>cd TaskManagerWeb\ndotnet run\n</code></pre> <p>Create a task via <code>https://localhost:5001</code>.</p> <p>Run the Function in a separate terminal:</p> <pre><code>cd ../TaskManagerFunctions\nfunc start\n</code></pre> <p>Check the Function's console for <code>Service Bus message: {\"id\":\"[guid]\",\"Title\":\"Test Task\",...}</code>.</p> <p>Step 6: Deploy and Test</p> <p>Deploy the Function and test in Azure.</p> <pre><code>func azure functionapp publish taskmanagerfunc-yourname\n</code></pre> <p>Test:</p> <ul> <li>Access <code>https://taskmanagerweb-yourname.azurewebsites.net</code> and create a task.</li> <li>In the Azure Portal, go to <code>taskmanagerfunc-yourname</code> &gt; Functions &gt; <code>ProcessTaskNotification</code> &gt; Monitor &gt; Logs.</li> <li>Verify logs show <code>Service Bus message</code> with task data.</li> <li>Check Service Bus metrics in <code>taskmanagersb-yourname</code> &gt; Queues &gt; <code>tasknotifications</code> &gt; Metrics; confirm <code>Messages</code> count increases.</li> </ul>"},{"location":"message/#why","title":"Why","text":"<p>Service Bus ensures reliable, ordered message delivery for notifications, a key exam topic, integrating seamlessly with our WebApp.</p>"},{"location":"message/#implement-solutions-that-use-azure-queue-storage-queues","title":"Implement Solutions that Use Azure Queue Storage Queues","text":"<p>We'll use Queue Storage to queue tasks for background processing (e.g., validation or formatting), triggered by a Function.</p>"},{"location":"message/#steps_1","title":"Steps","text":"<p>Follow these steps to implement Azure Queue Storage:</p> <ol> <li> <p>Create a Storage Account and Queue (if not already created).</p> </li> <li> <p>Get the Storage connection string and confirm it's in the Function App.</p> </li> <li> <p>Update the Function App to enqueue tasks.</p> </li> <li> <p>Create a Queue Trigger Function to process queue messages.</p> </li> <li> <p>Test locally (optional).</p> </li> <li> <p>Deploy and test the solution in Azure.</p> </li> </ol> <p>Step 1: Create Storage Account and Queue</p> <p>If not already created (from <code>functions.md</code>), create a Storage Account:</p> <pre><code>az storage account create --name taskmanagerstoreyourname --resource-group az204exam --location westus3 --sku Standard_LRS\n</code></pre> <p>Create a queue in the Storage Account:</p> <p>In the Azure Portal, go to <code>taskmanagerstoreyourname</code> &gt; Queues &gt; + Queue. Name: <code>taskqueue</code>.</p> <p>Alternatively, use the Azure CLI:</p> <pre><code>az storage queue create --name taskqueue --account-name taskmanagerstoreyourname\n</code></pre> <p>Step 2: Get Connection String and Confirm in Function App</p> <p>In <code>taskmanagerstoreyourname</code> &gt; Access keys, copy the Connection string for <code>key1</code>.</p> <p>Confirm it's added to the Function App (should already be added as <code>StorageConnection</code> from <code>functions.md</code>):</p> <ul> <li>In <code>taskmanagerfunc-yourname</code> &gt; Settings &gt; Environment Variables.</li> <li>Confirm:</li> <li>Name: <code>StorageConnection</code>.</li> <li>Value: <code>[your-connection-string]</code>.</li> </ul> <p>Step 3: Update Function App to Enqueue Tasks</p> <p>In <code>TaskManagerFunctions</code>, modify <code>ManageTask.cs</code> to send tasks to Queue Storage and add the Storage SDK.</p> <pre><code>dotnet add package Microsoft.Azure.Functions.Worker.Extensions.Storage\n</code></pre> <p>Update <code>ManageTask.cs</code>:</p> <pre><code>using System.IO;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Azure.Functions.Worker;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\nusing Microsoft.Azure.Cosmos;\nusing Microsoft.Azure.Functions.Worker.Extensions.Storage;\n\nnamespace TaskManagerFunctions\n{\n    public class ManageTask\n    {\n        private readonly ILogger&lt;ManageTask&gt; _logger;\n        private readonly CosmosClient _cosmosClient;\n\n        public ManageTask(ILogger&lt;ManageTask&gt; logger)\n        {\n            _logger = logger;\n            _cosmosClient = new CosmosClient(Environment.GetEnvironmentVariable(\"CosmosDBConnection\"), new CosmosClientOptions { ConnectionMode = ConnectionMode.Direct });\n        }\n\n        public class TaskItem\n        {\n            public string id { get; set; } = Guid.NewGuid().ToString();\n            public string Title { get; set; }\n            public string Description { get; set; }\n            public string DueDate { get; set; }\n        }\n\n        [Function(\"ManageTask\")]\n        public async Task&lt;IActionResult&gt; Run(\n            [HttpTrigger(AuthorizationLevel.Function, \"post\", \"get\")] HttpRequest req,\n            [QueueOutput(\"taskqueue\", Connection = \"StorageConnection\")] IAsyncCollector&lt;string&gt; queueOutput)\n        {\n            _logger.LogInformation(\"Processing task in Cosmos DB.\");\n\n            var container = _cosmosClient.GetContainer(\"TasksDB\", \"Tasks\");\n\n            if (req.Method == \"POST\")\n            {\n                string requestBody = await new StreamReader(req.Body).ReadToEndAsync();\n                TaskItem task = JsonConvert.DeserializeObject&lt;TaskItem&gt;(requestBody);\n\n                if (string.IsNullOrEmpty(task?.Title))\n                {\n                    return new BadRequestObjectResult(\"Please provide a title.\");\n                }\n\n                task.id = Guid.NewGuid().ToString();\n                await container.CreateItemAsync(task, new PartitionKey(task.id));\n                _logger.LogInformation($\"Created task: {task.Title}\");\n\n                // Add task to queue\n                await queueOutput.AddAsync(JsonConvert.SerializeObject(task));\n\n                return new OkObjectResult(task);\n            }\n            else // GET\n            {\n                string taskId = req.Query[\"taskId\"];\n                if (string.IsNullOrEmpty(taskId))\n                {\n                    return new BadRequestObjectResult(\"Please provide taskId.\");\n                }\n\n                try\n                {\n                    var task = await container.ReadItemAsync&lt;TaskItem&gt;(taskId, new PartitionKey(taskId));\n                    _logger.LogInformation($\"Read task: {task.Resource.Title}\");\n                    return new OkObjectResult(task.Resource);\n                }\n                catch (CosmosException ex) when (ex.StatusCode == System.Net.HttpStatusCode.NotFound)\n                {\n                    return new NotFoundResult();\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>Step 4: Create Queue Trigger Function</p> <p>In <code>TaskManagerFunctions</code>, create the Queue Trigger Function and update its code.</p> <pre><code>func new --template \"Azure Queue Storage Trigger\" --name ProcessTaskQueue\n</code></pre> <p>Update <code>ProcessTaskQueue.cs</code>:</p> <pre><code>using Microsoft.Azure.Functions.Worker;\nusing Microsoft.Extensions.Logging;\n\nnamespace TaskManagerFunctions\n{\n    public class ProcessTaskQueue\n    {\n        private readonly ILogger&lt;ProcessTaskQueue&gt; _logger;\n\n        public ProcessTaskQueue(ILogger&lt;ProcessTaskQueue&gt; logger)\n        {\n            _logger = logger;\n        }\n\n        [Function(\"ProcessTaskQueue\")]\n        public void Run([QueueTrigger(\"taskqueue\", Connection = \"StorageConnection\")] string queueMessage)\n        {\n            _logger.LogInformation($\"Queue message: {queueMessage}\");\n            // Simulate task validation or processing\n        }\n    }\n}\n</code></pre> <p>Step 5: Test Locally (Optional)</p> <p>Update <code>local.settings.json</code> in <code>TaskManagerFunctions</code>:</p> <pre><code>{\n    \"IsEncrypted\": false,\n    \"Values\": {\n        \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\",\n        \"FUNCTIONS_WORKER_RUNTIME\": \"dotnet-isolated\",\n        \"CosmosDBConnection\": \"[your-cosmos-connection]\",\n        \"EventHubConnection\": \"[your-eventhub-connection]\",\n        \"ServiceBusConnection\": \"[your-servicebus-connection]\",\n        \"StorageConnection\": \"[your-storage-connection]\"\n    }\n}\n</code></pre> <p>Run the Function locally to test:</p> <pre><code>cd TaskManagerFunctions\nfunc start\n</code></pre> <p>Trigger a task creation via APIM:</p> <pre><code>curl -X POST https://taskmanagerapim-yourname.azure-api.net/functions/managetask -H \"Ocp-Apim-Subscription-Key: [your-key]\" -H \"Content-Type: application/json\" -d '{\"Title\":\"Queue Task\",\"Description\":\"Test\",\"DueDate\":\"2025-04-15\"}'\n</code></pre> <p>Check the Function's console for <code>Queue message: {\"id\":\"[guid]\",\"Title\":\"Queue Task\",...}</code>.</p> <p>Step 6: Deploy and Test</p> <p>Deploy the Function and test in Azure.</p> <pre><code>func azure functionapp publish taskmanagerfunc-yourname\n</code></pre> <p>Test:</p> <ul> <li>Trigger a task creation via APIM (same curl command as above).</li> <li>In the Azure Portal, go to <code>taskmanagerfunc-yourname</code> &gt; Functions &gt; <code>ProcessTaskQueue</code> &gt; Monitor &gt; Logs.</li> <li>Verify logs show <code>Queue message</code> with task data.</li> <li>Check Queue metrics in <code>taskmanagerstoreyourname</code> &gt; Queues &gt; <code>taskqueue</code> &gt; Metrics; confirm <code>Queue Message Count</code> increases.</li> </ul>"},{"location":"message/#why_1","title":"Why","text":"<p>Queue Storage provides simple, cost-effective message queuing for background tasks, complementing Service Bus and covering the exam\u2019s requirements.</p>"},{"location":"message/#verify-all-topics","title":"Verify All Topics","text":"<ul> <li>Service Bus: Sent task notifications from WebApp, processed by <code>ProcessTaskNotification</code>.</li> <li>Queue Storage: Enqueued tasks from <code>ManageTask</code>, processed by <code>ProcessTaskQueue</code>.</li> </ul>"},{"location":"message/#clean-up-optional","title":"Clean Up (Optional)","text":"<p>To avoid costs, delete all resources:</p> <pre><code>az group delete -n az204exam --no-wait --yes\n</code></pre>"},{"location":"message/#next-steps","title":"Next Steps","text":"<ul> <li>Enhance <code>ProcessTaskNotification</code> to simulate email sending (e.g., log to Cosmos DB).</li> <li>Add error handling to <code>ProcessTaskQueue</code> (e.g., retry logic).</li> <li>Review all guides (<code>acr.md</code>, <code>auth.md</code>, <code>cosmos.md</code>, <code>functions.md</code>, <code>webapp.md</code>, <code>insights.md</code>, <code>apimanagement.md</code>, <code>eventbased.md</code>, <code>messagebased.md</code>) for exam prep.</li> </ul>"},{"location":"storage/","title":"Develop Solutions that Use Azure Blob Storage","text":"<p>This guide covers the AZ-204 exam topics for developing solutions with Azure Blob Storage:</p> <ul> <li>Set and retrieve properties and metadata</li> <li>Perform operations on data by using the appropriate SDK</li> <li>Implement storage policies and data lifecycle management</li> </ul>"},{"location":"storage/#prerequisites","title":"Prerequisites","text":"<ul> <li>.NET SDK 8.0 (Install via winget: `winget install Microsoft.DotNet.SDK.8))</li> <li>Azure CLI (Install)</li> <li>Azure Functions Core Tools (Install)</li> <li>Azure Subscription (Free tier or $200 credit recommended)</li> <li>Existing Resource Group (<code>az204exam</code>)</li> </ul>"},{"location":"storage/#set-up-blob-storage","title":"Set Up Blob Storage","text":"<p>Note: We set up <code>taskmanagerstoreyourname</code> in Functions for task JSONs (<code>tasks</code> container). Here, we\u2019ll add <code>attachments</code> for files to keep them separate.</p> <p>Follow these steps to set up Blob Storage:</p> <ol> <li> <p>Verify the Storage Account.</p> </li> <li> <p>Create an <code>attachments</code> container.</p> </li> <li> <p>Confirm the connection string in the Function App.</p> </li> </ol> <p>Step 1: Verify Storage Account</p> <p>In the Azure Portal, go to Storage accounts. Find <code>taskmanagerstoreyourname</code>. If missing, create:</p> <ul> <li>Name: <code>taskmanagerstoreyourname</code>.</li> <li>Resource group: <code>az204</code>.</li> <li>Region: <code>West US3</code>.</li> <li>Primary Service: <code>Azure Blob Storage or Azure Data Lake Storage Gen 2</code>.</li> <li>Redundancy: <code>LRS</code>.</li> </ul> <p>Step 2: Create Attachments Container</p> <p>In <code>taskmanagerstoreyourname</code>, go to Containers &gt; + Container. Name: <code>attachments</code>. Click Create.</p> <p>Step 3: Confirm Connection String</p> <p>Go to Access keys &gt; Copy Connection string for <code>key1</code>.</p> <p>In your Function App (<code>taskmanagerfunc-yourname</code>), go to Configuration &gt; Application settings. Verify <code>StorageConnection</code> (from Functions). If missing, add:</p> <ul> <li>Name: <code>StorageConnection</code>, Value: <code>[your-connection-string]</code>.</li> <li>Save and restart.</li> </ul>"},{"location":"storage/#perform-operations-with-the-sdk","title":"Perform Operations with the SDK","text":"<p>Note: We\u2019ll add Functions to upload and download files to <code>attachments</code> using the Blob SDK, prepping for web app file uploads.</p> <p>Follow these steps to perform operations with the Blob Storage SDK:</p> <ol> <li> <p>Add the Blob Storage SDK.</p> </li> <li> <p>Create an Upload Function.</p> </li> <li> <p>Test locally (optional).</p> </li> <li> <p>Deploy and test in Azure.</p> </li> </ol> <p>Step 1: Add Blob SDK</p> <p>In <code>TaskManagerFunctions</code>, run (if not added):</p> <pre><code>dotnet add package Azure.Storage.Blobs\n</code></pre> <p>Step 2: Create Upload Function</p> <p>Create a new HTTP-triggered Function.</p> <pre><code>cd TaskManagerFunctions\nfunc new --template \"HttpTrigger\" --name UploadAttachment\n</code></pre> <p>Edit <code>UploadAttachment.cs</code>:</p> <pre><code>using System;\nusing System.IO;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Azure.Functions.Worker;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.Logging;\nusing Azure.Storage.Blobs;\nusing Azure.Storage.Blobs.Models;\n\nnamespace TaskManagerFunctions\n{\n    public class UploadAttachment\n    {\n        private readonly ILogger&lt;UploadAttachment&gt; _logger;\n\n        public UploadAttachment(ILogger&lt;UploadAttachment&gt; logger)\n        {\n            _logger = logger;\n        }\n\n        [Function(\"UploadAttachment\")]\n        public async Task&lt;IActionResult&gt; Run(\n            [HttpTrigger(AuthorizationLevel.Function, \"post\")] HttpRequest req)\n        {\n            try\n            {\n                _logger.LogInformation(\"Uploading file to attachments.\");\n\n                // Validate content type\n                if (!req.HasFormContentType)\n                {\n                    _logger.LogWarning(\"Invalid content type: {ContentType}\", req.ContentType);\n                    return new BadRequestObjectResult(\"Please send a multipart form.\");\n                }\n\n                // Parse form\n                var form = await req.ReadFormAsync();\n                var file = form.Files.FirstOrDefault();\n                var taskId = form[\"taskId\"];\n\n                _logger.LogInformation(\"Form parsed. File: {FileName}, TaskId: {TaskId}\", file?.FileName, taskId);\n\n                // Validate form data\n                if (file == null || string.IsNullOrEmpty(taskId))\n                {\n                    _logger.LogWarning(\"Missing file or taskId.\");\n                    return new BadRequestObjectResult(\"Please provide a file and taskId.\");\n                }\n\n                // Get storage connection\n                var connectionString = Environment.GetEnvironmentVariable(\"StorageConnection\");\n                if (string.IsNullOrEmpty(connectionString))\n                {\n                    _logger.LogError(\"StorageConnection environment variable is missing or empty.\");\n                    return new StatusCodeResult(500);\n                }\n\n                // Initialize blob client\n                _logger.LogInformation(\"Initializing BlobServiceClient.\");\n                var blobServiceClient = new BlobServiceClient(connectionString);\n                var containerClient = blobServiceClient.GetBlobContainerClient(\"attachments\");\n\n                // Create container if it doesn't exist\n                _logger.LogInformation(\"Ensuring attachments container exists.\");\n                await containerClient.CreateIfNotExistsAsync();\n\n                // Upload blob\n                var blobName = $\"{taskId}/{file.FileName}\";\n                var blobClient = containerClient.GetBlobClient(blobName);\n                _logger.LogInformation(\"Uploading file to blob: {BlobName}\", blobName);\n\n                using (var stream = file.OpenReadStream())\n                {\n                    await blobClient.UploadAsync(stream, new BlobUploadOptions\n                    {\n                        HttpHeaders = new BlobHttpHeaders { ContentType = file.ContentType },\n                        Metadata = new Dictionary&lt;string, string&gt; { { \"TaskId\", taskId } }\n                    });\n                }\n\n                _logger.LogInformation(\"Uploaded: {BlobName}\", blobName);\n                return new OkObjectResult($\"File uploaded: {blobName}\");\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Failed to upload file. Exception: {Message}, StackTrace: {StackTrace}\", ex.Message, ex.StackTrace);\n                return new ObjectResult($\"Error uploading file: {ex.Message}\") { StatusCode = 500 };\n            }\n        }\n    }\n}\n</code></pre> <p>Step 3: Test Locally (Optional)</p> <p>Update <code>local.settings.json</code>:</p> <pre><code>{\n    \"IsEncrypted\": false,\n    \"Values\": {\n        \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\",\n        \"FUNCTIONS_WORKER_RUNTIME\": \"dotnet-isolated\",\n        \"StorageConnection\": \"[your-connection-string]\"\n    }\n}\n</code></pre> <p>Run the Function locally:</p> <pre><code>func start\n</code></pre> <p>POST (use Postman or curl, with a file like <code>test.txt</code>):</p> <pre><code>curl -X POST http://localhost:7071/api/UploadAttachment -F \"taskId=test123\" -F \"file=@test.txt\"\n</code></pre> <p>Check the <code>attachments</code> container (Azurite or Azure Portal) for <code>test123/test.txt</code>.</p> <p>Step 4: Deploy and Test</p> <p>Deploy the Function to Azure:</p> <pre><code>func azure functionapp publish taskmanagerfunc-yourname\n</code></pre> <p>Retrieve the Function key:</p> <pre><code>az functionapp function keys list --name taskmanagerfunc-yourname --resource-group az204 --function-name UploadAttachment\n</code></pre> <p>Test:</p> <pre><code>curl -X POST https://taskmanagerfunc-yourname.azurewebsites.net/api/uploadattachment?code=[your-key] -F \"taskId=test123\" -F \"file=@test.txt\"\n</code></pre> <p>Verify in Azure Portal &gt; <code>taskmanagerstoreyourname</code> &gt; <code>attachments</code>.</p>"},{"location":"storage/#why","title":"Why","text":"<p>Uploads files with the SDK, showing create operations for the exam.</p>"},{"location":"storage/#set-and-retrieve-properties-and-metadata","title":"Set and Retrieve Properties and Metadata","text":"<p>Note: We\u2019ll get the file\u2019s content type and metadata (task ID) to show exam skills.</p> <p>Follow these steps to set and retrieve properties and metadata:</p> <ol> <li> <p>Create a Download Function.</p> </li> <li> <p>Test locally (optional).</p> </li> <li> <p>Deploy and test in Azure.</p> </li> </ol> <p>Step 1: Create Download Function</p> <p>Create a new HTTP-triggered Function.</p> <pre><code>cd TaskManagerFunctions\nfunc new --template \"HttpTrigger\" --name GetAttachment\n</code></pre> <p>Edit <code>GetAttachment.cs</code>:</p> <pre><code>using System;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Azure.Functions.Worker;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.Logging;\nusing Azure.Storage.Blobs;\nusing Azure;\n\nnamespace TaskManagerFunctions\n{\n    public class GetAttachment\n    {\n        private readonly ILogger&lt;GetAttachment&gt; _logger;\n\n        public GetAttachment(ILogger&lt;GetAttachment&gt; logger)\n        {\n            _logger = logger;\n        }\n\n        [Function(\"GetAttachment\")]\n        public async Task&lt;IActionResult&gt; Run(\n            [HttpTrigger(AuthorizationLevel.Function, \"get\")] HttpRequest req)\n        {\n            try\n            {\n                _logger.LogInformation(\"Retrieving file metadata.\");\n\n                // Validate query parameters\n                string? taskId = req.Query[\"taskId\"];\n                string? fileName = req.Query[\"fileName\"];\n                _logger.LogInformation(\"Query parameters: taskId={TaskId}, fileName={FileName}\", taskId, fileName);\n\n                if (string.IsNullOrEmpty(taskId) || string.IsNullOrEmpty(fileName))\n                {\n                    _logger.LogWarning(\"Missing taskId or fileName in query parameters.\");\n                    return new BadRequestObjectResult(\"Please provide taskId and fileName.\");\n                }\n\n                // Get storage connection\n                var connectionString = Environment.GetEnvironmentVariable(\"StorageConnection\");\n                if (string.IsNullOrEmpty(connectionString))\n                {\n                    _logger.LogError(\"StorageConnection environment variable is missing or empty.\");\n                    return new StatusCodeResult(500);\n                }\n\n                // Initialize blob client\n                _logger.LogInformation(\"Initializing BlobServiceClient.\");\n                var blobServiceClient = new BlobServiceClient(connectionString);\n                var containerClient = blobServiceClient.GetBlobContainerClient(\"attachments\");\n                var blobName = $\"{taskId}/{fileName}\";\n                var blobClient = containerClient.GetBlobClient(blobName);\n                _logger.LogInformation(\"Accessing blob: {BlobName}\", blobName);\n\n                // Get blob properties\n                var properties = await blobClient.GetPropertiesAsync();\n                var metadata = properties.Value.Metadata;\n                var contentType = properties.Value.ContentType;\n\n                // Safely access metadata\n                string? metadataTaskId = metadata.ContainsKey(\"TaskId\") ? metadata[\"TaskId\"] : null;\n\n                _logger.LogInformation(\"Blob properties retrieved. TaskId={TaskId}, ContentType={ContentType}, Uri={Uri}\",\n                    metadataTaskId, contentType, blobClient.Uri);\n\n                return new OkObjectResult(new\n                {\n                    TaskId = metadataTaskId,\n                    ContentType = contentType,\n                    Uri = blobClient.Uri\n                });\n            }\n            catch (RequestFailedException ex) when (ex.Status == 404)\n            {\n                _logger.LogWarning(\"Blob not found: {ErrorMessage}\", ex.Message);\n                return new NotFoundResult();\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Failed to retrieve file metadata. Exception: {Message}, StackTrace: {StackTrace}\",\n                    ex.Message, ex.StackTrace);\n                return new ObjectResult($\"Error retrieving file metadata: {ex.Message}\") { StatusCode = 500 };\n            }\n        }\n    }\n}\n</code></pre> <p>Step 2: Test Locally (Optional)</p> <p>Run the Function locally:</p> <pre><code>func start\n</code></pre> <p>GET:</p> <pre><code>curl http://localhost:7071/api/GetAttachment?taskId=test123&amp;fileName=test.txt\n</code></pre> <p>Expect JSON: <code>{\"TaskId\":\"test123\",\"ContentType\":\"text/plain\",\"Uri\":\"...\"}</code>.</p> <p>Step 3: Deploy and Test</p> <p>Deploy the Function to Azure:</p> <pre><code>func azure functionapp publish taskmanagerfunc-yourname\n</code></pre> <p>Retrieve the Function key:</p> <pre><code>az functionapp function keys list --name taskmanagerfunc-yourname --resource-group az204 --function-name GetAttachment\n</code></pre> <p>Test:</p> <pre><code>curl https://taskmanagerfunc-yourname.azurewebsites.net/api/getattachment?code=[your-key]&amp;taskId=test123&amp;fileName=test.txt\n</code></pre> <p>Verify metadata and properties.</p>"},{"location":"storage/#why_1","title":"Why","text":"<p>Shows setting and getting metadata/properties, a key exam topic.</p>"},{"location":"storage/#implement-storage-policies-and-data-lifecycle-management","title":"Implement Storage Policies and Data Lifecycle Management","text":"<p>Note: We\u2019ll delete old files in <code>attachments</code> to manage costs.</p> <p>Follow these steps to implement storage policies and data lifecycle management:</p> <ol> <li> <p>Create a lifecycle rule.</p> </li> <li> <p>Verify the lifecycle rule.</p> </li> </ol> <p>Step 1: Create Lifecycle Rule</p> <p>In the Azure Portal, go to <code>taskmanagerstoreyourname</code> &gt; Data Management &gt; Lifecycle management &gt; Add rule.</p> <ul> <li>Rule name: <code>ArchiveOldFiles</code>.</li> <li>Scope: Filter to <code>attachments/</code> (type <code>attachments/</code> in Blob prefix).</li> <li>Conditions:</li> <li>Blob type: Block blobs.</li> <li>Not modified for 1 days.</li> <li>Actions:</li> <li>Delete Blob.</li> <li>Feel free to set up your own rules here.</li> <li>Click Add.</li> </ul> <p>Step 2: Verify</p> <ul> <li>Upload a file via <code>UploadAttachment</code>.</li> <li>Wait 1 day (or use a test account to simulate).</li> <li>Check <code>attachments</code> &gt; Confirm old files are deleted.</li> </ul>"},{"location":"storage/#why_2","title":"Why","text":"<p>Lifecycle rules reduce storage costs, an exam must-know.</p>"},{"location":"webapp/","title":"Implement Azure App Service Web Apps","text":"<p>This guide covers the AZ-204 exam topics for implementing Azure App Service Web Apps:</p> <ul> <li>Create an Azure App Service Web App</li> <li>Configure and implement diagnostics and logging</li> <li>Deploy code and containerized solutions</li> <li>Configure settings including Transport Layer Security (TLS), API settings, and service connections</li> <li>Implement autoscaling</li> <li>Configure deployment slots</li> </ul>"},{"location":"webapp/#prerequisites","title":"Prerequisites","text":"<ul> <li>.NET SDK 8.0 (Install via winget: <code>winget install Microsoft.DotNet.SDK.8</code>)</li> <li>Azure CLI (Install)</li> <li>Azure Functions Core Tools (Install)</li> <li>Azure Subscription (Free tier or $200 credit recommended for minimal costs)</li> <li>Existing Resource Group</li> </ul>"},{"location":"webapp/#set-up-azure-app-service","title":"Set Up Azure App Service","text":"<p>Follow these steps to set up an Azure App Service and create a .NET Core MVC app:</p> <ol> <li> <p>Create a new App Service in the Azure Portal.</p> </li> <li> <p>Create a .NET Core MVC app locally.</p> </li> <li> <p>Add a model for tasks.</p> </li> <li> <p>Update the controller to handle tasks.</p> </li> <li> <p>Modify the home page view to add a form.</p> </li> <li> <p>Test the app locally.</p> </li> <li> <p>Deploy the app to Azure App Service.</p> </li> <li> <p>Configure settings (TLS, API settings, service connections).</p> </li> </ol> <p>Step 1: Create a New App Service</p> <p>In the Azure Portal, create a new App Service:</p> <ul> <li>Use the Free F1 tier to avoid costs.</li> <li>Note the app name (e.g., <code>taskmanagerweb-yourname</code>) and resource group (e.g., <code>az204exam</code>).</li> <li>Check out the tabs for a learning experience; we are leaving them as default.</li> </ul> <p></p> <p>Once it's built, hit the URL to confirm it's up.</p> <p></p> <p>Step 2: Create a .NET Core MVC App Locally</p> <p>Create and run the app locally.</p> <pre><code>dotnet new mvc -o TaskManagerWeb\ncd TaskManagerWeb\ndotnet run\n</code></pre> <p>Verify the app runs at <code>http://localhost:port</code>.</p> <p>Launch your preferred editor (e.g., VS Code).</p> <pre><code>code .\n</code></pre> <p>Step 3: Add a Model for Tasks</p> <p>Browse into the <code>Models</code> directory under <code>TaskManagerWeb</code> and add <code>TaskItem.cs</code>.</p> <pre><code>namespace TaskManagerWeb.Models\n{\n    public class TaskItem\n    {\n        public string id { get; set; } = System.Guid.NewGuid().ToString();\n        public string? Title { get; set; }\n        public string? Description { get; set; }\n        public string? DueDate { get; set; }\n    }\n}\n</code></pre> <p>Step 4: Update the Controller to Handle Tasks</p> <p>Update <code>Controllers/HomeController.cs</code> to handle tasks (in-memory for now).</p> <pre><code>using Microsoft.AspNetCore.Mvc;\nusing TaskManagerWeb.Models;\nusing System.Collections.Generic;\n\nnamespace TaskManagerWeb.Controllers\n{\n    public class HomeController : Controller\n    {\n        private static List&lt;TaskItem&gt; _tasks = new List&lt;TaskItem&gt;();\n\n        public IActionResult Index()\n        {\n            return View(_tasks);\n        }\n\n        [HttpPost]\n        public IActionResult Create(string title, string description, DateTime dueDate)\n        {\n            var task = new TaskItem\n            {\n                Title = title,\n                Description = description,\n                DueDate = dueDate.ToString(\"yyyy-MM-dd\") // Convert DateTime to string\n            };\n            _tasks.Add(task);\n            return RedirectToAction(\"Index\");\n        }\n    }\n}\n</code></pre> <p>Step 5: Modify the Home Page View to Add a Form</p> <p>The view (<code>Index.cshtml</code>) defines the UI, including the form for adding tasks and a list to display them.</p> <p>Open <code>Views/Home/Index.cshtml</code> and replace the default content with:</p> <pre><code>@model List&lt;TaskManagerWeb.Models.TaskItem&gt;\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;Task Manager&lt;/title&gt;\n    &lt;style&gt;\n        &lt;text&gt;\n        body {\n            font-family: 'Segoe UI', Arial, sans-serif;\n            background-color: #f4f6f9;\n            color: #333;\n            margin: 0;\n            padding: 20px;\n            line-height: 1.6;\n        }\n\n        h1 {\n            color: #2c3e50;\n            text-align: center;\n            margin-bottom: 20px;\n        }\n\n        h2 {\n            color: #34495e;\n            margin-top: 30px;\n            border-bottom: 2px solid #3498db;\n            padding-bottom: 5px;\n        }\n\n        form {\n            background: #fff;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n            max-width: 500px;\n            margin: 0 auto;\n        }\n\n        div {\n            margin-bottom: 15px;\n        }\n\n        label {\n            display: block;\n            font-weight: 600;\n            margin-bottom: 5px;\n            color: #2c3e50;\n        }\n\n        input[type=\"text\"],\n        textarea,\n        input[type=\"date\"] {\n            width: 100%;\n            padding: 10px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            font-size: 14px;\n            box-sizing: border-box;\n        }\n\n        textarea {\n            resize: vertical;\n            min-height: 100px;\n        }\n\n        input:focus,\n        textarea:focus {\n            outline: none;\n            border-color: #3498db;\n            box-shadow: 0 0 5px rgba(52, 152, 219, 0.3);\n        }\n\n        button {\n            background-color: #3498db;\n            color: #fff;\n            padding: 10px 20px;\n            border: none;\n            border-radius: 4px;\n            font-size: 16px;\n            cursor: pointer;\n            transition: background-color 0.3s;\n        }\n\n        button:hover {\n            background-color: #2980b9;\n        }\n\n        ul {\n            list-style: none;\n            padding: 0;\n            max-width: 600px;\n            margin: 20px auto;\n        }\n\n        li {\n            background: #fff;\n            padding: 15px;\n            margin-bottom: 10px;\n            border-radius: 6px;\n            box-shadow: 0 1px 5px rgba(0, 0, 0, 0.1);\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n\n        li.no-tasks {\n            color: #7f8c8d;\n            font-style: italic;\n            text-align: center;\n            box-shadow: none;\n        }\n\n        .task-info {\n            flex-grow: 1;\n        }\n\n        .task-info strong {\n            color: #2c3e50;\n        }\n\n        @@media (max-width: 600px) {\n            form, ul {\n                padding: 10px;\n            }\n\n            li {\n                flex-direction: column;\n                align-items: flex-start;\n            }\n        }\n        &lt;/text&gt;\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Task Manager&lt;/h1&gt;\n\n    &lt;form asp-action=\"Create\" method=\"post\"&gt;\n        &lt;div&gt;\n            &lt;label&gt;Title:&lt;/label&gt;\n            &lt;input type=\"text\" name=\"title\" required /&gt;\n        &lt;/div&gt;\n        &lt;div&gt;\n            &lt;label&gt;Description:&lt;/label&gt;\n            &lt;textarea name=\"description\"&gt;&lt;/textarea&gt;\n        &lt;/div&gt;\n        &lt;div&gt;\n            &lt;label&gt;Due Date:&lt;/label&gt;\n            &lt;input type=\"date\" name=\"dueDate\" required /&gt;\n        &lt;/div&gt;\n        &lt;button type=\"submit\"&gt;Add Task&lt;/button&gt;\n    &lt;/form&gt;\n\n    &lt;h2&gt;Tasks&lt;/h2&gt;\n    &lt;ul&gt;\n        @if (Model != null &amp;&amp; Model.Any())\n        {\n            foreach (var task in Model)\n            {\n                &lt;li&gt;\n                    &lt;div class=\"task-info\"&gt;\n                        &lt;strong&gt;@task.Title&lt;/strong&gt; - @task.Description\n                        &lt;br /&gt;\n                        &lt;small&gt;Due: @(task.DueDate ?? \"No due date\")&lt;/small&gt;\n                    &lt;/div&gt;\n                &lt;/li&gt;\n            }\n        }\n        else\n        {\n            &lt;li class=\"no-tasks\"&gt;No tasks yet.&lt;/li&gt;\n        }\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Step 6: Test the App Locally</p> <p>Test the app to ensure it works locally.</p> <pre><code>dotnet run\n</code></pre> <p>Step 7: Deploy to Azure App Service</p> <p>Push the app to the Azure App Service created earlier.</p> <pre><code>az webapp up --name taskmanagerweb-yourname --resource-group az204exam --sku F1 --location yourlocation --runtime \"dotnet:8\"\n</code></pre> <p>Test the app in your browser. You can get the URL from the App Service Overview page.</p> <p>Step 8: Configure Settings (TLS, API Settings, Service Connections)</p> <p>Add App Settings:</p> <ul> <li>Go to Settings &gt; Environment Variables.</li> <li>Click + Add Button.</li> <li>Name: <code>CosmosDBConnection</code>, Value: <code>placeholder</code> (we\u2019ll use this later for Cosmos DB).</li> <li>Click Apply &gt; Apply &gt; Confirm to restart the app.</li> </ul> <p>Set Up Managed Identity:</p> <ul> <li>Go to Identity &gt; System assigned.</li> <li>Turn Status to On &gt; Save.</li> <li>Note: This lets the app securely connect to other Azure services (like Cosmos DB) without passwords later.</li> </ul> <p>Verify:</p> <ul> <li>Check Environment Variables in the Portal to see <code>CosmosDBConnection</code>.</li> <li>No code changes needed, but the app is ready for future connections.</li> </ul>"},{"location":"webapp/#implement-autoscaling","title":"Implement Autoscaling","text":"<p>Note: Autoscaling requires a Standard (S1) or higher tier. You will have to chase this thread on your own.</p>"},{"location":"webapp/#configure-deployment-slots","title":"Configure Deployment Slots","text":"<p>Note: Deployment slots need a Standard (S1) or higher tier, not Free F1. You will have to chase this thread on your own.</p>"},{"location":"webapp/#next-steps","title":"Next Steps","text":"<ul> <li>Do everything again, but this time use the CLI to build the Web App.</li> <li>If you are going to take a break, you could clean up here, but the next section builds on what we have done here.</li> </ul>"}]}